●echo
    -n：	不自动加入换行符(zsh会将无换行结尾的输出的尾部标记%)
    -e：	启用转义语义(zsh自动开启，包括赋值环境变量时)

●ls
    --color=auto --time-style=+  -ahl：	常用
    -d：	显示目录本身
    -i：	显示inode
    -L：	显示符号链接的目标
    -n：	显示uid与gid
    -R：	目录递归显示
    -s：	显示文件block大小
    -S：	按大小排序(降序)
    -t：	按modify时间排序(降序)
    -Z：	安全上下文

●stat
    ：	显示文件详细信息
    -f：	显示文件所处文件系统信息

●touch
    -a：	只改atime
    -m：	只改mtime
    -d：	指定touch的时间，date模式

●file
    -i：	详述

●pwd
    -P：	显示真实路径而非软连接

●ln  SRC  TAG
    ：	硬连接
    -s：	软连接
    -f：	强制覆盖

●cp  SRC  TAG
    -a：	尽可能复制所有信息
    -r：	目录递归
    -u：	只更新
    -v：	详述
    -f：	强制覆盖
    -n：	直接不覆盖
    -i：	询问是否覆盖

●mv SRC  TAG
    -u：	只更新
    -v：	详述
    -f：	强制覆盖
    -n：	直接不覆盖
    -i：	询问是否覆盖

●rm
    -r、-v、-f、-i
    -r：	目录递归
    -v：	详述
    -f：	强制覆盖
    -i：	询问是否覆盖

●cat
    -A：	打印空白符
    -n：	显示行号
    -b：	显示行号，空行不算行号
●tac
    翻转首尾
●rev
    每行翻转

●tail
    -v：	显示文件名
    -n：	指定显示多少行
    -f：	监听

●head
    -v：	显示文件名
    -n：	指定显示多少行

●mkdir
    -p：	递归

●which：	搜索 $PATH，查找对应命令
●whereis：	搜索可执行，头文件和帮助信息的位置，使用系统内建数据库
●whatis：	查看某个命令的精简解释

●locate  PATTERN
    -i：	忽略大小写
    -r：	正则表达式(默认通配符)
    -c：	显示匹配的文件数量
    -S：	显示数据库信息
●updatedb
    /etc/updatedb.conf
    /var/lib/mlocate/mlocate.db
    由SystendUnit updatedb.service更新

●find  DIR
    -print
    -regex、-iregex
    -name、-iname、-inum
    -uid、-gid、-user、-group、-nouser
    -writable、-readable、-executable
    -perm：	-表示至少子集，/表示至少交集，无前缀表示精准权限
    -size：	+/-表示大于小于，单位用c/k/M/G
    -[amc][time|min]：	+/-表示至多与至少，无前缀表示精准权限
    -[amc]newer file
    -type：	f/d/l/b/c/p/s
    -links：	硬连接数
    -a、-o、-not
    -exec  CMD  {} \;

●date
    -d：	将参数转换为时间
    -d @N：	epoch之后N秒
    -d '19700101  Ndays'：epoch之后N天
    +"%[Yy]-%[mbB]-%[dj]  %H:%M:%[Ss]  %[aA]"

●cal  MONTH  YEAR

●bc
    -l：	使用数学库函数
    s(sin x)，c(cos x)，a(arctan x)，l(ln x)，e(e^x)
    特殊变量：	scale，last，ibase，obase
    ▪注：	支持^运算符求幂

●split  FILE  Preffix
    -b：	按大小分割
    -l：	按行数分割
    ▪注：preffix最后最好加dot，大小单位可指定，默认byte

●locale [-a]
    /etc/locale.conf

●ulimit  -a -HS
    /etc/security/ulimits.d/

●iconv  FILE
    -f：	原字符集
    -t：	目标字符集
    -o：	输出文件
    --list：	列出可选字符集

●diff -Naur OLD NEW > *.patch
●patch -pn  -R   < *.patch 
    ▪new和old不要在同一目录下
    ▪n为去掉的/个数

●curl -o File URL
●sh -c 'curl -fsSL URL'

●col -x ：将tab替换为等宽space

●sendEmail
    -s：	SMTP服务器
    -f：	发送者的邮箱
    -t：	接收者的邮箱
    -cc：	表示抄送发给谁
    -bcc：	表示暗抄送给谁
    -xu：	SMTP验证的用户名
    -xp：	SMTP验证的密码
    -u：	标题
    -m：	内容
    -a：	附件
    -o message-content-type=html/text：	邮件的格式
    -o message-charset=utf8：	邮件的编码

○权限
▪权限信息：	只有owner能修改
    uid与gid：	指明owner与group
    rwxsStT：	对应special/owner/group/others权限
    umask：	默认权限掩码，设置后会掩盖默认权限，目录默认755，文件默认644
▪普通文件：	
    ▪r/w表示可读/写其对应block
    ▪x表示可以加载执行此文件
    ▪SUID表示执行时环境变量EUID改为owner
    ▪SGID表示执行时环境变量EGID改为group
▪目录：	
    ▪r/w表示可读/写其对应block的entry，注意r无法读取inode
    ▪x表示能否对目录下文件进行访问，即使没有rw也可以“摸黑”访问
    ▪SGID表示所有创建在此目录的普通文件的gid默认为目录的gid
    ▪SBIT表示该目录下的普通文件只有其owner与目录owner能删除
▪ACL权限优先级在owner和group之后
    ▪setfacl与getfacl命令

●chattr
    -R：    递归目录
    a：	    只能追加
    i：	    无法变更
    A：	    不更新atime
    S：	    同步存储文件
    d：	    不被xfsdump
    ▪注：-设置，+取消
●lsattr

●su
    -：	转为root
    - user：	转为user
    -c：	用对应目标用户执行一条命令

●sudo CMD
    -u：	使用目标用户权限(仅root可用)
    -l：	列出本用户sudo信息
    -b：	后台执行

●visudo
    ▪/etc/sudoers
    user  host=(root) cmd，!cmd
    %grp host=(%root) NOPASSWD:ALL


○GPT分区表：	
    ▪MBR保护
    ▪GPT头
    磁盘GUID、GPT版本、校验、分区项信息等
    ▪分区项
    分区GUID、类型、属性、标签、分区位置
    ▪分区
    ▪备份区
    GPT头与分区项的备份

○XFS文件系统
    ▪分配组
    超级块(只在第一个分配组)
    空闲空间索引(B+tree)
    Inode索引(B+tree)
    ▪Inodes
    ▪blocks
    ▪log
    ▪realtime
    ▪XFS特性
    分配组的并行性
    日志与恢复
    延迟分配
    扩展属性

●df  MP
    -T：	显示文件系统类型
    -h：	人性化size
    -i：	显示inode使用情况

●du
    -sh：	显示目标占用block大小

●lsblk
    -f：	显示文件系统类型
    -m：	权限及所有者

●blkid  [DEV]
    文件系统标签与类型
    文件系统UUID(fstab所用)
    分区标签
    分区UUID

●gdisk  DEV [-l]
    ▪m
    p：	打印分区项
    i：	分区信息
    t：	修改类型
    l：	列出所有类型
    s：	分区排序
    ▪x
    a：	修改分区属性
    ▪r
●partprobe：	让内核重载gdisk的修改

●parted  DEV
    ▪p：	打印分区项
    ▪mktable：	创建新GPT
    ▪mkpart  LABLE  START  END
    ▪resizepart   NUM  END
    ▪rm   NUM
    ▪name  NUM  NAME
    ▪set  NUM  FLAG  on/off  
    ▪FLAG：	raid  lvm  boot  hidden  diag

○parted: Flag      Type                     Attr
	hidden                              0
        boot        EFI System
	diag        Windows RE
	msftres     Micorsoft reserved

●mount  DEV  MP
    -a：	忽略其他参数，按/etc/fstab挂载
    -n：	不修改/etc/mtab
    --bind：	转移挂载点
    --rbind：	递归转移挂载点
    -t：	指定文件系统类型(sysfs,proc,devtmpfs,tmpfs)
    -o：	
    ▪remount
    ▪default
    ▪loop
    ▪logdev=：	挂载xfs时指定logdev
    ▪nouuid：	用于挂载LVM快照
    ▪iocharset=：	字符集
    ▪ro/rw
    ▪sync/async
    ▪atime/noatime
    ▪suid/nosuid
    ▪exec/exec
    ▪userquota/grpquota/quota/noquota
●umount (-n)

●mkfs.xfs  DEV
    -f：	强制
    -L：	设置文件系统标签
    -b size=
    -i  size=
    -d agcount=
    -d file
    -l  external,logdev=  ,size=

●xfs_admin
    -l：	查看文件系统标签
    -L：	修改标签
    -u：	查看文件系统uuid
    -U：	修改uuid

●xfs_info

●xfs_repair
    -f：	对image file修复
    -n：	只检测
    -e：	若有错误被恢复，则返回4
    -d：	用于单用户模式强制恢复以ro挂载的/

●xfs_growfs  

●xfs_fsr

●xfsdump  MP
    -l：	备份级别0为全量，其他在前一级基础上增量
    -L：	备份文件标签
    -M：	备份设备标签
    -f：	指定备份文件
    -e：	排除属性含d的文件
    -s：	指定目录(无增量备份)
    ▪注：	挂载点末不能带/号
●xfsrestore  MP
    -f：	指定使用的备份文件
    -s：	只还原指定的文件或目录
    -I：	查询基础数据库/var/lib/xfsdump/inventory/ 

    ○PV阶段
●pvs
●pvdisplay  PV
●pvcreate  DEV
●pvremove  DEV

    ○VG阶段
●vgs
●vgdisplay  VG
●vgcreate VG  PV
    ▪-s：	指定PE大小
●vgextend VG  PV
●vgreduce VG  PV
●vgchange  -a [yn]
●vgremove  VG

    ○LV阶段
●lvs
●lvdisplay  LV
●lvcreate
    -L SIZE  -n LV：		    普通LV
    -L SIZE  -T VG/LVpool：	    LVpool
    -V SIZE   -T VG/LVpool   -n LV：在指定LVpool中建立LV
    -s  -L SIZE  -n LVS   VG/LV：   建立快照
●lvresize
    -L [-+]SIZE
●lvchange  -a [yn]
●lvremove  LV

●zip  ZIPFILE  FILES

●gzip/bzip2/xz
    -[1-9]：	压缩等级，越大压缩比越高
    -k：	保存原文件不删除
    -l：	查看压缩包信息

●tar
    -[zjJ]：	gzip : bzip2 : xz
    -[cxtu]：	打包:解包:查询:更新
    --delete：	删除
    -f：	指定压缩文件名
    -v：	详述
    -p：	保留权限等信息
    --exlcude：	排除，pattern
    -C：	解包时指定路径
    ▪注：	
    -f后接的路径名也会保留，除了根目录
    如果用.做目录，则解压后目录内文件仍会分散

●dd
    if=：	skip=：of=：seek=：bs=：count=
    conv=
    ▪lcase：	小写
    ▪ucase：	大写
    ▪notrunc：	不截断，覆盖

●losetup
    /dev/loop0  loopfile
    -d /dev/loop0

○登陆文件
▪/etc/nologin：	若存在则只允许root登陆
▪/etc/issue：	本地控制台登陆提示
▪/etc/motd：	远程登录提示
▪/etc/login.defs：	用户登陆设置

●last：	系统的启动与用户登陆日志
    /var/log/wtmp
●lastlog：	每个用户最后一次登陆时间
    /var/log/lastlog
●lastb：	上次错误登录记录
    /variety/log/btmp
●w：	系统现在的登录情况
    /var/run/ulmp

○用户文件
▪/etc/passwd
    用户名：	密码：UID：GID：描述信息：主目录：默认Shell
▪/etc/shadow
    用户名：	加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留
    ▪注：	在密码前加上 "!"、"*" 或 "x" 使密码暂时失效
▪/etc/group
    组名：	密码：GID：组附加用户列表
▪/etc/gshadow
    组名：	加密密码：组管理员：组附加用户列表
▪/etc/skel/.*：	建立用户主目录时拷贝次目录

●id：	该用户信息
●groups：	该用户参与的group

●useradd
    -u：	UID
    -g：	GID
    -G：	附加组
    -c：	描述信息
    -d：	主目录绝对路径
    -m：	自动创建主目录
    -s：	默认shell
    -o：	允许用户UID相同
    -r：	系统用户(1-499)
    -D：	查看或修改默认配置/etc/default/useradd

●usermod
    -l：	用户名
    -u：	UID
    -g：	GID
    -G：	附加组
    -c：	描述信息
    -d：	主目录绝对路径
    -s：	默认shell

●userdel
    -r：	删除主目录，邮箱需要手动删除

●passwd
    -S：	查看信息
    -l：	锁定用户
    -u：	解锁用户
    --stdin：	指明从管道读取密码

●chage
    -l：	详情
    -d：	最后一次修改YYYY-MM-DD，为0强制修改
    -m：	最小修改间隔天数
    -M：	密码有效天数
    -W：	密码到期提前警告天数
    -i：	宽限天数
    -E：	失效日期YYYY-MM-DD，-1则无

●groupadd
    -g：	GID
    -r：	系统群组

●groupmod
    -g：	GID
    -n：	组名

●gpasswd
    -A：	管理员
    -M：	将用户加入群组(root)
    -r：	移除群组密码
    -R：	密码失效
    -a：	将用户加入群组
    -d：	移除用户

●groupdel：	不能删除初始组

●newgrp：	启动新shell并修改GID

    ○进程的标识：	
    STATE
    CMD
    TTY
    UID、EUID、GID、EGID
    PID、PPID、PGID、SID、TPGID
    SELinux context

    ○CPU使用时间
    real：	运行期间流逝的时间
    sy：	内核进程
    us：	用户进程(un-niced)
    ni：	用户进程(niced)
    id：	空闲资源
    wa：	等待I/O
    hi  ：	硬中断请求服务
    si  ：	软中断请求服务
    st ：	虚拟机偷取的时间，即虚拟CPU等待实际CPU

    ○进程优先级
▪PRI(Priority)与NI(Nice)
    PRI (最终值) = PRI (原始值) + NI
    PRI值是由内核动态调整的，用户不能直接修改，只能通过修改 NI 值来影响 PRI 值，间接地调整进程优先级
▪NI 值越小，进程的 PRI 就会降低，该进程就越优先被 CPU 处理
▪注意：	
    ▪NI 范围是 -20~19。
    ▪普通用户调整 NI 值的范围是 0~19，而且只能调整自己的进程。
    ▪普通用户只能调高 NI 值，而不能降低
    ▪只有 root 用户才能设定进程 NI 值为负值，而且可以调整任何用户的进程

    ○常用信号
▪1：	SIGHU：Term：挂断
▪2：	SIGINT：Term：终止(键盘)
▪3：	SIGQUIT：Core：退出(键盘)
▪6：	SIGABRT：Core：abort函数
▪9：	SIGKILL：Term：强制终止
▪10：	SIGUSR1：Term：用户自定义1
▪12：	SIGUSR2：Term：用户自定义2
▪14：	SIGALRM：Term：alarm函数
▪15：	SIGTERM：Tern：正常终止
▪18：	SIGCONT：Cont：恢复暂停
▪19：	SIGTSTP：Stop：暂停(键盘)

●jobs
    -l：	显示PID
    -r：	显示running jobs
    -s：	显示suspended jobs

●fg/bg  %JID

●top
    -bn：	指定刷新次数并手动重定向到文件
    -d：	指定刷新周期
    -u：	指定监视用户
    -p：	指定监视PID
    ▪交互命令
    P/M/T/N：	按cpu/mem/time/pid排序
    c：	显示完整命令
    e：	切换内存单位
    1：	显示多核
    z：	切换颜色
    f：	选择域的显示/排序
    t/m：	切换cpu/mem显示模式
    k/r：	kill/renice

●ps
    -l：	只显示当前shell的进程
    -le：	显示所有进程

●pstree -Uup

●kill -(signal) PID
    PID为负，表示其绝对值为进程组号

●killall -(signal) Pname
    -I：	忽略大小写

●pkill (-signal)
    -ce：	显示匹配进程的数量并显示每个进程信息
    -u：	EUID
    -U：	UID
    -G：	GID
    -P：	PPID
    -s：	PSID
    -t：	TTY

●nice -n NI CMD
●renice -n PID

●nohup CMD (&)

●lsof：	列出打开的文件
    -a：	and条件逻辑
    -u：	UID
    -p：	PID
    -c：	指定进程cmd的开头字符串
    +d：	列出目录下被打开的文件，+D递归

●fuser -uv FILE/DIR
    列出打开目标文件的进程

●free
    -wh：	人性化输出
    -s：	刷新周期
    -c：	刷新次数

●vmstat -w  [周期]  [次数] 

●iostat -h

●lspci
    -s：	显示指定设备
    -vv：	显示详情
●lsusb -t
●lsusb.py
●lscpu

    ○syslog.h规范类型
▪0：	kern(kernel)：内核日志，大都为硬件检测与内核功能加载
▪1：	user：用户层信息(如logger)
▪2：	mail：邮件服务有关
▪3：	daemon：系统服务(如systemd)
▪4：	auth：认证与授权(如login,ssh,su)
▪5：	syslog：rsyslogd服务
▪6：	lpr：打印
▪7：	news：新闻组
▪8：	uucp：全名"Unix to Unix Copy Protocol"，早期用于unix系統间的程序资料交换
▪9：	cron：计划任务(如cron,at)
▪10：	authpriv：与auth类似，但记录较多账号私人信息，包括PAM模块
▪11：	ftp：与FTP协议有关
▪16~23：	local0 ~ local7：本地保留
    ○syslog.h规范级别
▪7：	debug：除错
▪6：	info：基本信息说明；
▪5：	notice：正常通知
▪4：	warning(warn)：警告，可能有问题但还不至与影响到daemon
▪3：	err (error)	：错误，例如配置错误导致无法启动
▪2：	crit：严重错误
▪1：	alert：警报
▪0：	emerg(panic)：疼痛等級，意指系統几乎要死机，通常大概只有硬件出问题导致内核无法运行


●journalctl
    -b：	开机启动日志
    -n：	最近的几行日志
    -r：	反向，由新到旧
    -f：	监听
    -t：	类型
    -p：	级别
    -u：	指定unit
    _PID=、_UID=、_COMM=
    -S、-U：	since与until某时刻的日志(date格式时间)

●logger  -p  user.info

    ○systemd服务
▪unit配置目录：	(优先级降序)
    /etc/systemd/system/
    /run/systemd/system/
    /lib/systemd/system/
▪unit类型：	
    ▪service：	一般服务类型
    ▪socket：	监听端口
    ▪timer：	定时器
    ▪target：	一系列unit的集合
    包括：	graphical，multi-user，basic，sysinit，rescue，emerge，shutdown，getty
▪启动流程
    ▪根据配置目录优先级，寻找default.target
    ▪读取并执行default.target，递归启动各依赖units
▪注：	
    ▪systemd无法管理手动执行启动的服务
    ▪只有在配置目录的unit才在systemd视线里
    ▪是否开机启动取决于满足上述的unit是否在default.target的依赖链中

●systemctl
▪信息查看
    status，show，cat，edit
▪unit查看
    ▪--state=
    ▪list-units：	已加载的
    -t：	指定unit类型
    -a：	所有
    ▪list-unit-files：	所有
    ▪list-dependencies (--reverse)
▪手动控制
    start，stop，restart，reload
▪开机管理
    enable/disable：	可使用--now同时执行start/stop
    static：	只能作为依赖被启动
    mask：	禁止启动，unmask解禁
▪主机状态
    suspend，hibernate，rescue，emergency
▪主机target
    get-default，set-default，isolate
▪systemd重新读取unit
    daemon-reload

●systemd-analyze
    systemd-analyze blame
    systemd-analyze plot > plot.svg
●systemd-escape --path：	路径转义

    ○units配置
▪选项可重复设置，后面覆盖前面
▪bool值可为：	1/0，yes/no，ture/false，on/off
▪#与;开头为注释
▪foo.service.wants/requires依赖目录
▪若unit名字为foo@bar.service，且目标不存在，则使用foo@.service(模板)，配置中%I为bar

    ○[Unit]：	指定条件下开启或关闭自己或其他Units
▪Description：	简介
▪Documentation：	提供详细信息，接受 "http://", "https://", "file:", "info:", "man:" 五种URI类型
▪After/Before：	同时开启/关闭时确定先后顺序，待所有状态完全确定后才算完成
    ▪注：	启动先则关闭后，但当一启动一关闭则先关后开(无先后顺序关系则独立启动与关闭)
▪同时启动依赖Units
    Wants(fail、dead都行)
    Requires(fail不行、dead行)
    BindsTo(fail、dead都不行)
    ▪注：	依赖关系是同时启动而非先后顺序启动
    ▪注：	当条件检测失败时为dead而非fail
▪Requisite(只检查，不启动，检查失败则fail)
▪PartOf(跟着同时关闭或重启)
▪Conflicts(不能同时存在)

    ○[Install]：	只在enable与disable时使用
▪Alias：	实质便是在递归启动链中创建符号链接，▪别名会随着单元的enable与disable而生效和失效
▪WantedBy/RequiredBy：	空格分隔的unit列表
    ▪加入到.wants/.requires目录中
▪Also：	空格分隔单元列表
    ▪enable与disable它时也对列表中单元进行相同操作

    ○[Service]
▪Type
    ▪simple
    ▪exec
    ▪注：	simple表示当fork()返回时即算启动完成，而 exec 则表示仅在 fork()与execve()都执行成功时才算是启动完成；这意味着对于exec类型的服务来说， 如果不能成功调用主服务进程(例如User=不存在或者二进制可执行文件不存在)， 那么systemctl start将会执行失败
    ▪oneshot(主进程退出后才算完成，直接从activating到inactive)
    ▪notify(要等待返回状态信息后才算完成)
    ▪forking(父进程退出且至少有一个子进程才算完成，应该设置PIDFile=以跟踪主进程)
    ▪dbus(从D-Bus获得名称后算完成，需设置BusName选项)
    ▪idle(所有任务完成后才启动，最多延迟5秒)
▪ExecStart
    ▪只有Type=oneshot才能有多个命令行；
    ▪绝对路径前-：	失败退出被视为成功
    ▪绝对路径前+：	root用户权限
▪ExecPre/ExecPost
    ▪可设置多个，顺序执行，若未设置-，则失败后后续不执行
▪ExecStop/ExecReload
▪RemainAfterExit：	正常退出后仍为active，并无法再次启动
▪Restart：	
    ▪正常退出、异常退出、被杀死、超时的时候是否重启，不包括手动关闭
    ▪no，on-success，on-failure，on-abnormal，on-watchdog，on-abort，always
▪RestartSec：	默认单位秒
▪SuccessExitStatus
    设置额外正常退出状态，可包括信号
▪KillMode
    ▪process：	仅杀死主进程
    ▪control-group：	杀死cgroup中所有进程
    ▪none：	仅执行ExecStop
▪User/Group

    ○[timer]
▪OnBootSec：	相对内核启动
▪OnStartupSec：	相对systemd启动
▪OnActiveSec：	相对该timer启动
▪OnUnitActiveSec：	相对匹配unit最后一次启动
▪OnUnitInactiveSec：	相对匹配单元最后一次关闭
▪OnCalendar=(星期) 年-月-日 时-分-秒 (时区)
    ▪星期：	Mon，Tue，Wed，Thu，Fri，Sat，Sun
    ▪主子部分：	
    ,表示指定
    *表示任一
    /N表示指定的间隔为N跳跃，后面的数也算
    ..表示范围
    月~日表示月中倒数第几天
    秒可以为小数
▪AccuracySec：	设置精度，默认一分钟
▪Persistent：	是否操作OnCalendar不错过
▪WakeSystem：	是否到时唤醒系统
▪Unit：	指定匹配unit，默认同名.service
▪注：	时间单位us ms s m h d w M y

    ○[Socket]
▪ListenStream：监听的port或IP/port，TCP
▪ListenDatagram：监听的port或IP/port，UDP
▪ListenSequentialPacket：监听UNIX socket
▪Accept=no：不为每个连接都产生实例
▪FreeBind=yes：在指定IP可用前监听它， 出于健壮性考虑， 当你希望将套接字绑定到特定的IP地址时应该设置此项，否则网络未及时启动时socket将无法启动

    ○GRUB配置
▪/etc/default/grub
    GRUB_DEFAULT=0
    GRUB_TIMEOUT=5
    GRUB_GFXMODE=auto
    GRUB_GFXPAYLOAD_LINUX=keep
    GRUB_CMDLINE_LINUX-DEFAULT=
▪/etc/grub.d/*
    00_header
    01_user：	自定义环境
    10_linux：	确定linux选单
    20_os-prober：	确定其他OS选单
    40_custom：	自定义选单

    ○GRUB Shell
▪模块：	默认自动加载command.lst与crypto.lst
▪命令规则：	
    ▪分区：	(hd0，gpt1)
    ▪文件：	(hd0，gpt1)/path/to/file
    ▪扇区：	(hd0，gpt1)0+1
▪特殊变量
    ▪prefix：	grub安装目录
    ▪root：	根设备，未指定设备名的文件的默认设备
    ▪cmdpath：	core.image所在目录
    ▪superusers：	超级用户，逗号分隔
▪命令
    ▪ls：	列出已知设备/设备中的文件/目录的内容
    ▪cat：	显示文件内容，--dos选项处理换行符
    ▪echo：	与bash用法一样
    ▪normal：	执行命令脚本
    ▪source：	将文件内容插入当前位置
    ▪configfile：	将文件做配置加载，不会保留其设置的环境变量
    ▪set var=val：	设置变量
    ▪export var：	导出至环境变量，使其对configfile命令载入的配置文件可见
    ▪lsmod：	列表已加载模块
    ▪insmod/rmmod：	加载/卸载模块
    ▪loopback dev isofile：	建立loop设备，-d删除
    ▪halt/reboot：	关机/重启
    ○GRUB安全
▪设置超级用户
    set superusers="root"
    ▪注：	设置后只有超级用户才能修改选单
▪设置加密密码
    password_pbkdf2 root grub.pbkdf2.sha512...
    ▪注：	使用grub-mkpasswd-pbkdf2命令产生密码
▪设置明文密码
    password user ...
▪menuentry选项
    --unrestricted：	所有人可执行
    --users ""：	仅超级用户
    --users "user"：	仅user与超级用户

    ○GRUB选单
▪menuentry
    ▪"title"：	选单名
    ▪--class：	选单主题样式
    ▪--id：	赋值chosen，覆盖原来的"title"
    ▪语句块
    linux：	加载内核
    initrd：	加载内核映像
    boot：	启动已加载的os或loader，选单结束时隐含
    chianloader：	链式加载文件

    ○系统救援
▪修改选单内核参数为rd.break，并chroot
    ▪注：	rd.break模式下无SELinux，修改密码会导致其安全上下文失效而导致无法登陆
▪修改选单内核参数为systemd-unit=rescu.target

●grub-install
    --target=x86_64-efi 
    --efi-directory=/boot/efi
    --bootloader-id=GRUB

●grub-mkconfig  -o  /boot/grub/grub.cfg

    ○主机配置
▪/etc/shells：	可用shell
▪/etc/services：	服务名与端口对照
▪/etc/hostname：	主机名
▪/etc/hosts：	已知主机名
▪/etc/resolv.conf：	DNS服务器
▪/etc/locale.conf：	语系与字符集
▪/etc/localtime：	本地时区/usr/share/zoneinfo/*
▪/etc/adjtime：	系统时间校准类型

●hostnamectl
    set-hostname

●locale

●localectl

●timedatectl
    set-timezone
    set-local-rtc
    set-ntp：	chronyd服务

    ○网络基础概念
▪OSI七层模型与TCP/IP四层模型
    ▪应用层：	应用层、会话层、表现层
    ▪传输层：	传输层
    ▪网络层：	网络层
    ▪链路层：	数据链路层、物理层
▪TCP三次握手与四次挥手
▪网络协议栈
    发送：	
    ▪应用层调用socket接口函数，发送message
 ▪传输层确认socket的协议与端口号，并封装为segment▪网络层利用路由表确认参数(协议、目的IP、本地IP等)，分片并封装为packet，若目的IP为本地则直接上传
▪链路层通过驱动程序，利用ARP表确认目的MAC地址，若不存在则发送ARP请求，最后封装成frame，然后发送到物理网卡进行信号转换并传输
    接收：	
    ▪链路层中网卡默认会将MAC地址非本机且非广播的frame丢弃，若为ARP包则本层解决
    ▪网络层确认目的IP是否为本机IP或本机网段广播，若为ICMP则本层解决
    ▪传输层确认socket的协议与端口，上传给应用层
    ▪应用层控制会话的挂断
▪交换机
    ▪将端口与frame的源MAC地址进行绑定(一个端口可绑定多个MAC地址，反之不行)
    ▪若arp表中无frame的目的MAC地址则泛洪(在其他端口转发原frame)
    ▪二层交换机配置有IP地址与默认路由，用户远程管理，目的MAC地址与目的IP地址都为交换机才行
▪路由器
    ▪检查目的MAC地址，判断是否接收
    ▪检查目的IP地址，判断是否接收或转发
    ▪转发时可能需要NAT
▪防火墙
▪虚拟网卡与虚拟网桥
    ▪物理网卡接收的包发送到虚拟网桥，其通过类似交换机原理转发包，且虚拟网桥自身有IP与MAC
    ▪虚拟网卡接收到虚拟网桥转发的数据包，并开始解包流程
▪VPN
    ▪与远程主机连接形成VLAN，通过建立隧道和修改路由，将某目的网络/主机的路由修改到隧道另一端
    ▪数据包封装了访问请求，由VPS转发
▪代理
    ▪正向代理：	客户端设置代理后，所有消息发送至代理服务器并由其转发
    ▪反向代理：	服务器设置代理后，客户端连接代理服务器，由代理服务器分配连接到真正服务器

    ○网络配置
▪网络设备驱动
▪网络连接
▪IP地址
▪路由表
▪默认网关
▪DNS服务器

●ip --color
    ▪link/l
    set IF up/down
    set name NAME
    set promisc
    ▪addr/a
    add IP/MASK  broadcast +  dev IF
    del IP/MASK  dev IF
    ▪route/r
    add IP/MASK  via GWIP  dev IF  src IP  metric 600
    add [throw|unreachable|prohibit|blackhole] IP/MA
    del IP/MASK  via GWIP  dev IF
    ▪neigh/n
    add/del IP  lla MAC  dev IF

    ○NetworkManager服务
●nmcli
    ▪radio/r
    wifi on|off
    ▪connection/c
    up  CON-NAME
    add type . ifname . ssid . con-name .
    del SSID
    reload
    ▪device/d
    wifi
    dis IF
    wifi c SSID  password PASSWD  (hidden yes)
●nmtui

●nmap

●ss
    ▪-at：	TCP端口
    ▪-atn：	TCP端口，指定端口号
    ▪-au：	UDP端口
    ▪-ax：	UNIX类型socket
●ping


●GCC
▪优化级别：-O1  -O2  -O3
▪编译程度：-E(.i)  -S(.s)  -c(.o)  -o
▪指定标准：-std=c11
▪使用AVX指令：-mavx2
▪并发库：-lpthread
▪制作动态库：-shared  -fpic
▪调用链接器：-rdynamic  -ldl
▪链接库打桩：-Wl,--wrap,func
▪定义宏：-Dmacros_define
▪指定inclide目录：-I
▪指定lib目录：-L -lxxx（库名省略lib、.a、.so）
▪GPROF剖析：-pg（最好也加下述参数）
▪调试：-Og  -g  -fno-inline
▪指定机器：-m32  -m64
▪指定程序规模：-mcmodel=medium/large
代码数据段默认32位跳转
▪报错： -Werror  -Wall  -Wextra

●GBD  <exec-file> <core-dump> PID
▪coredump设置
ulimit -c ulimit
echo '/home/core/core.%e.%p' > /proc/sys/kernel/core_pattern
▪断点：
b/break：<func>，<*addr>，<linenum>，<if-condition>
watch：<value>，<if-condition>
catch：<event>
d/delete，disable，enable，clear
i/info b
▪运行：
set args，show args，path
r/run：I/O重定向
c/continue
s/step，si/stepi
n/next，ni/nexti
u/until：结束循环，行号
f/finish
k/kill
q/quit
▪调试：
p/print：val，$reg，express，"%s", addr，*arr@lenth
x ：addr
<formate>：/n字节/u类型/[bhwg]位长
i/info：locals，args，stack，frame，program
whatis：value
display：每次单步后打印变量
handle  <signal>  <keyword>
▪界面：
la/layout：src，asm，reg，sp
l/list：lineno，funcname
disas：func，addr
i/info：reg，all

●AR：
▪r：替换，d：删除，t：显示
▪c：创建，s：符号，u：更新，v：详述
▪创建：rscv
▪显示：tv
▪追加：rsv
▪更新：rsuv
▪删除：dsv
▪提取：xv
▪注：BSD风格：cmd  opts  lib.a  a.o

●cscope -bqR

●OBJDUMP：-dx
●READELF
●GPROF
●LDD -v
●STRACE
●PMAP

●CMAKE
●CTAGS：-R --c++-kinds=
+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+liaS --extra=+q --language-force=c

GCC配套的标准库，libstdc++和libsupc++ 两个子库
clang配套的标准库，libc++和 libc++abi，头文件安装到v1



●TMUX
    ▪ls
    ▪new -s <session-name>
    ▪a -t <session-name>
    ▪kill-session -t <session-name>
    ▪kill-server
    ▪source-file
    ▪-S socketfile
    ▪-S socketfile a
▪join-pane -s session:window.pane
将目标pane加入当前window
▪快捷键：prefix设为Alt-w
    d(卸离)，D(选择卸离)，:(命令模式)，shift+鼠标(选取)
    ▪window：
    c(创建)，&(关闭)，(重名win)，.(重编号)
    ▪切换windows：
    p/n(前后)，0~9(编号)，f(搜索)，w(选择)
    ▪pane：
    "(sp)，%(vs)，x(关闭)，z(最大化)，
    !(新窗口打开)，q(显示编号并切换)
▪插件：tmux-resurrect(备份快照)
S：保存
R：恢复

○SSH
●ssh -p <port> user@host
●ssh-keygen -t ecdsa -b 512 -C "注释"
交互时可添加密码短语对私钥加密，每次用时需输入密码短语
●ssh-keygen -f ~/.ssh/id_ecdsa -p
更改密码短语
●ssh-copy-id -i mypub -p port user@host

○客户端配置~/.ssh/config
配置一次连接所需要的信息
Host
HostName
Port
User
IdentitiesOnly
IdentityFile

○服务端配置/etc/ssh/sshd_config
改port
限root
强pub
systemd unit配置
sshd.service或
sshd.socket与sshd@.service
[socket]
ListenStream=
FreeBind=true
Accept=no

○概念
▪纳入git管理的目录
    工作区：untraced，new，deleted，modified
    暂存区：traced , new，deleted，modified
    仓库：tags，branches(local & remote)
▪操作
    ▪初始化git管理目录，跟踪文件并同步至暂存区
    ▪工->暂，将工作区的各种变更同步到暂存区
    ▪暂->工，回溯工作区，或撤销暂存区
    ▪工/暂->仓库：提交到本地HEAD分支
    ▪标签：建立、销毁
    ▪分支：建立、切换、合并、销毁
    为某个特性或bug新建分支，成熟后合并入master
    为某个remote仓库新建分支，以跟踪和隔离
    ▪远程仓库：克隆、拉取、合并、推送
    跟踪分支建立后需要手动拉取以同步
    push时若与远程仓库目标分支冲突(未同步)则失败
    remote有自己的branch与tag，push时注意相对应
▪分支模型
    ▪抽象模型：每个分支的修改与开发进度相互独立
    ▪commit信息：
    作者、提交者、日期、校验、描述、指针、"快照"
    ▪每个commit指针指向其父commit且可能有多个
    ▪本地分支指针，指向该分支对应的commit
    ▪本地HEAD指针，指向当前分支对应的commit
    ▪远程仓库的指针，本地不可修改只能合并，通过拉取更新
    ▪合并操作：快进，递归
    原理：将两分支相对共同祖先的变更合并，若对同一个文件均有变更则冲突
    ▪变基操作：将分支完全并入以简化commit历史
    原理：将本分支相对共同祖先的各个变更作用于目标分支而形成各个commit，并删除该分支历史
    注意：因为删除历史的缘故
    不要rebase已经发布了的分支commit
    rebase分支的分支应该使用--onto选项，以免将分支上的另一个子分支的历史改变
▪注：所有分支操作应保证工作区干净
▪工作流程
    贡献者
    ▪将目标项目仓库fork到自己的公开站点
    ▪从自己站点clone项目到本地进行线下开发修改
    ▪本地master分支跟踪origin/master
    ▪设置upstream/master连接项目发布点
    ▪完成后push到自己的公开站点
    ▪向发布点发送pull request
    ▪若冲突则同步upstream再合并、修改、推送
    维护者
    ▪为贡献者仓库添加remote仓库并fetch到本地
    ▪若贡献太多，则配置remote仓库的refs
    ▪审查、修改、合并后push到项目发布点

○git配置
▪/etc/gitconfig
git config --system
▪~/.gitconfig
git config --global
▪~/.git/config
git config --local
▪选项
    user.name
    user.email
    core.editor
    credential.helper  cache
▪配置refs
    [remote "RPO"]
    url = URL
    fetch = +refs/heads/*:refs/remote/origin/*
    fetch = +refs/pull/*/head:refs/remote/origin/pr/*

○.gitignore
▪所有空行或者以 ＃ 开头的行都会被 Git 忽略
▪可以使用标准的 glob 模式匹配
▪匹配模式可以以（/）开头防止递归
▪匹配模式可以以（/）结尾指定目录
▪要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反

○.git目录
▪description：gitweb程序使用
▪config：仓库配置
▪objects：所有对象(数据、树、提交、标签)
▪HEAD：当前checkout的指针
▪index：暂存区
▪refs/：指向分支的提交对象的指针
    refs/heads/*：本地分支引用
    refs/tags/*：本地标签引用
    refs/remote/RPO/*：远程仓库的分支引用

○zsh的git插件

●git add
ga，gaa

●git rm
grm

●git mv
gmv
▪注：需要通过git mv来移动，不能马后炮

●git restore <path>
grs(回溯W)，grst(撤销S)

●git status
gst，gss(左W右S)

●git diff
gd，gds，gdt，gdts，gdtre
▪例：
[<path>]：比较W-S或S-H指定文件
<commit> [<path>]：比较W-C或S-C指定文件
<commit> <commit> [<path>]：比较指定两个C的指定文件

●git commit
gc，gc!，gca，gca!
▪注：
a代表直接W->H提交
!代表覆盖上次提交

●git tag
gt，gta，gtd
gtl，gtv
gsh TAG
▪例：
git tag -a TAG -m 'discription'：强标签
git tag TAG-lw：轻量标签

●git show
gsh

●git log [<file>|<branch>|<commit>]
glg，glola，glgga

●git checkout
gco
gcb，gct
gcm，gcd
▪例：
git checkout -b <branch> <remote>/<branch>：创建、检出并跟踪
git checkout --track <remote>/<branch>：本分支直接跟踪

●git branch <branch>：会当前HEAD创建分支
gb，gbav
gbda：删除已合并的分支
gbnm：查看未合并的分支

●git merge <branch>：合并<branch>到本分支
gm，gmt，gma

●git rebase
grb
grba，grbs，grbc
▪例：
git rebase <branch>：本分支变基到<branch>
git rebase <主branch> <被branch>

●git remote
gr
grv，grsh
gra，grrm，grmv
glr(查看请求ref)
▪例：
git remote add <remote> URL
▪流程：
gra -> gcb|gct -> gf|gl

●git fetch [<remote>]
gf

●git pull [<remote>]
gl

●git push
gp，gpd，gpta
▪例：
git push <remote> <本地branch>：推送本地分支<branch>到远程同名分支
git push <remote> <本地ref>:<远程ref>
git push <remote> --delete <branch>：销毁远程仓库某分支
git push <remote> <tag>
git push --tags
git push <remote> :refs/tags/tagname

●git stach
gsta，gstall(包括untraced)，gstp，gstl

●git cherry-pick <commit>：复制(合并)目标commit到当前分支
gcp，gcpa，gcpc

●git bundle create <file> HEAD <branch>
▪注：
最好带上HEAD自动checkout
可用git clone <file> [<dirname>]重建目录

●git format-patch
▪例：
git format-patch <branch> -n    ：目标分支最近n次更新
git format-patch <commit>       ：本分支自目标commit(不含)之后的更新
git format-patch <commit1>..<commit2>   ：两个commit(包含)之间的更新

●git apply
▪例：
git apply [--check|--stat] ：直接更新|确认是否冲突|确认哪些更改


○基础操作
▪初始化：git init
▪跟踪文件：git add
▪同步到暂存区：git add|rm|mv
▪回溯与撤销：git restore [--staged]
▪查看状态：git status [-s]
▪-s选项，左工右暂
▪查看变更：
git diff [--staged]
git difftool --tool=gvimdiff3  [--staged]
git diff-tree ABCH BBCH
▪模式
[<path>]：比较工-暂或暂-仓指定文件
<commit> [<path>]：比较工-C或暂-C指定文件
<commit> <commit> [<path>]：比较指定C的指定文件
▪提交至仓库本分支：git commit
额外 -m 选项将参数设为提交描述(隔空行为详述)
额外 -a 选项跳过暂存区，直接从工作区到仓库
额外 --amend 选项表示覆盖上次提交
▪查看提交日志：
git log  查看提交日志
git log -p -2  查看近两次提交日志
git log (--online) --decorate --graph --all  查看分支

○标签
▪查看标签：
git tag -v
git tag -l 'v1.8.*'
git show TAG
▪添加标签
git tag -a TAG -m 'discription'：强标签
git tag TAG-lw：轻量标签
git tag -a TAG '某次提交的校验值'
▪删除标签
git tag -d TAG

○分支
▪查看
git branch -avv
额外 --merged/--no-merged 选项确认是否合并
▪创建
git branch BCH
git checkout -b BCH
▪切换
git checkout BCH：还可以切换都某次提交，注意暂存工作区
▪合并
git merge BCH
git mergetool
git merge --abort
▪变基
git rebase BCH
git rebase RBBCH  DEBAH
git rebase --abort/--skip/--continue
▪销毁
git branch -d/D BCH

○远程仓库
▪克隆完整远程仓库：
git clone URL  Dirname
▪查看
git remote -v
git remote show RPO
git ls-remote RPO：查看引用，包括pull request
▪配置remote
git remote add RPO URL 
git remote rename RPO NewRPO
git remote rm RPO
▪跟踪remote
git checkout -b LBCH RPO/RBCH
git checkout --track RPO/BCH
▪同步remote
▪同步到本地
git fetch  RPO/--all：只抓取到本地(推荐)
git pull  RPO：自动合并分支
▪同步到remote
git push  RPO BCH：推送本地分支到远程同名分支
git push RPO LBCH:RBCH
git push RPO --delete BCH：销毁远程仓库某分支
git push RPO TAG
git push --tags
git push RPO :refs/tags/tagname

BASH基础
●bash选项set
-u：不存在变量报错并停止
-e：出错就停止
-o pipefail：管道命令中有一个出错也停止，默认管道命令行的返回值为最后一个命令的返回值
-x：调试
-n：语法检测
-c：模拟命令行

○bash快捷键
^A：行首
^E：行尾
^U：删除前面字符
^K：删除后面字符
^W：删除前面单词
^Y：粘贴前面删除
^D：删除光标前的字符，或者退出会话(EOF)
^C：结束当前命令(signal 2)
^Z：暂停当前命令(signal 18)
^L：清屏并重新显示
^R：历史命令反向搜索
^S：历史命令正向搜索
^G：退出当前编辑或搜索
^T：交换前后两个字符
^V：输入字符字面量
^_ ：撤销，有的终端映射为 CTRL+/ 或 CTRL+7
^X ^X：光标在当前位置和行首来回跳转 

○基本操作
●exit
●wait
●sleep
●exec
●source
●history {N}
●alias/unalias
●stty  size：显示终端size
●reset：重置因读取二进制文件导致的乱码

○特殊字符
○通配符：
*：任意长度的任意字符
**：递归目录(zsh)
?：一个任意字符
[^ - ]：序列中一个可能的字符
{ , }：序列中的字符展开
{ .. }：序列中的字符展开

○括号
(cmd;cmd)：子shell中执行，
((expr,expr))：C风格表达式
[ ]：test命令别名[，最后一个参数为]
[[ ]]：shell关键字，支持=~模糊字符匹配，通配符字符匹配(关闭对文件的通配符扩展)，逻辑运算符
{cmd;cmd}：当前shell中执行

○~扩展：
~：家目录
~+：当前目录
~-：上次目录

○!扩展：
!#：当前命令
!!：上一条命令
!-n：上n条命令
!^：上一条命令的第一个单词
!$：上一条命令的最后一个单词
!:n：上一条命令的第n个单词
!:n-$：上一条命令的第n个单词到最后一个单词

○$扩展：
$$：当前shell的PID
$!：上次后台进程的进程号
$?：上次命令返回值
$*：所有参数(聚合)字符串
$@：所有参数(分离)数组
$#：参数个数
$N：第N个参数，从0开始
$(<file)：扩展为file文件的内容
$(cmd)：扩展为cmd的标准输出，同`cmd`
$((expr,expr))、$[expr,expr]：C风格表达式
$'escap'：输出转义字符
$varname、${varname}：变量扩展

○空白符：参数分隔符，\n为执行命令行
○: ：nop
○! ：将后面的命令返回结果逻辑非
○#：注释
○命令间：
; ：顺序执行
&&：逻辑与执行
||：逻辑或执行
| ：管道才能连接命令成一个进程组
&：后台执行，只能在命令行最后，且对于上述前3个分隔的命令行，只有最后一个命令为后台执行，使用(cmd;cmd)与{cmd;cmd}可对其整体进行&

○I/O重定向
< file：重定向标准输入到file
<< EOF：从标准输入读取直到EOF(不含EOF)
<<< string：将string作用标准输入内容
<(cmd)：将cmd的标准输出的fd作为参数
> file：重定向标准输出到file(截断)
>> file：同上(追加)
1>&2：脚本用echo输出标准错误
2>&1：将标准错误也纳入管道
2> file：重定向标准错误到file
&> file：重定向标准错误与标准输出到file
▪注：倒数1、2与倒数3、4不能合用

○转义字符
\：转义所有特殊字符
" "：只保留$扩展、!扩展、" 的功能
' '：只保留 ' 的功能

●test
▪逻辑运算符
    !、&&、||
▪字符串比较
    =~、==、!=、<、>
    -n：不为空
    -z：为空
▪算术比较
    -eq、-ne、-gt、-ge、-lt、-le
▪文件判断
    -e：存在
    -s：大小不为0
    -f：普通文件
    -d：目录
    -L：符号链接
    -b：块文件
    -c：字符文件
    -S：socket
    -p：pipe
    -r：可读
    -w：可写
    -x：可执行
    -u：SUID
    -g：SGID
    -k：SBIT
    -O：onwer为EUID
    -G：group为EGID
    -nt：file1比file2新(mtime)
    -ef：两文件为同一文件的硬连接

○正则表达式
^：行首
$：行尾
. ：除\n外任意字符
[^ - ]：匹配序列中的一个字符
*：前一个字符匹配0-∞次
+：前一个字符匹配1-∞次
?：前一个字符匹配0/1次
{n}：前一个字符匹配n次
{n,m}：前一个字符匹配n-m次
{n,}：前一个字符匹配至少n次
{,m}：前一个字符最多匹配m次
(pattern)：形成子表达式，可被当做“前一个字符”
pattern1|pattern2：匹配左/右整体，用(pattern)将其限制在局部
[[:alnum:]]、[[:punct:]]、[[:xdigit:]]
\d：数字
\D：非数字
\s：空白符
\S：非空白符
\w：字词(字母、数字、下划线)
\W：非字词
C风格转义字符：需要支持ECMAScript语法

○变量
▪定义变量
var=val
array[0]=valA
array=([0]=valA [1]=valB [2]=valC)
array=(valA valB valC)
▪读取变量
$#var：字符串长度
$+var：变量存在为1，否则为0
${array[i]}：取得数组中的元素
${array[@]}：取得数组中所有元素
${#array[@]}：取得数组的长度
${#array[i]}：取得数组中某个变量的长度
${varname:-word}：若不为空则返回变量，否则返回 word
${varname:=word}：若不为空则返回变量，否则赋值成 word 并返回
${varname:?message}：若不为空则返回变量，否则打印错误信息并退出
${varname:+word}：若不为空则返回 word，否则返回 null
${varname:offset:len}：取得字符串的子字符串
▪注：zsh中数组下标从1开始，且无需${arr[i]}中的花括号
▪注：shell变量默认都是字符串
▪注：字符串变量所有空白符等特殊字符，使用时应该用双引号包含

●env
●export
●declare
-r：设置变量为只读，+r取消
-p：查看变量
○环境变量
HOME
USER
LOGNAME
UID、EUID、GID、EGID
PATH
MAIL
PWD
SHELL
TERM
HISTSIZE
HOSTNAME：zsh中为HOST
RANDOM：0 ~ 32767
FUNCNAME
LINENO

BASH脚本
○函数
▪定义
function  funcname()
{
statements
return val
}
▪调用
funcname  arg1  arg2
()funcname arg1 arg2

○语句
▪分支
    if   ;then
    elif   ;then
    fi
▪循环(for-in)
    for  i  in  List ; do
    done
▪循环(for-loop)
    for (( ; ; )) ; do
    done
▪循环(while/until)
    while/until ; do
    done
▪选择
    select  i  in  List ; do
    done
    ▪输出PS3，死循环选择，一般嵌套case语句，选择数字并将对应List中字符串赋值给i
▪多分支
    case  $i  in
    v1)    ;&
    v2|v3)  ;;
    *)  ;;
    esac
●控制跳转
    continue、break

○命令
●eval  \$$var
将参数中的$some_val解析后当做命令指针

●getopts  "xy:"  var
$OPTARG为选项参数

●read  VAR
-p：提示符
-t：限时
-n：读取字符数
-s：关闭回显

●trap
cmd sig1 sig2：在脚本中设置信号处理命令
"" sig1 sig2：在脚本中屏蔽某信号
- sig1 sig2：恢复默认信号处理行为

●xargs  CMD
原理：将管道中的字符串的分隔符替换为空格后，作为CMD的参数
-0：保留空白符不被替换，空白符前有\时也会保留
-e：直到遇到此单词停止
-p：每个单词都提醒用户
-n：一次给予多少个参数

●tee  FILE
-a：追加而非截断

●sort
-f：忽略大小写
-b：忽略行前空白
-M：月份名称排序
-n：数值排序
-r：反向排位(降序)
-u：删除相同行
-t：指定分隔符
-k n,m：指定比较第n-m域
field定义：blank开始到non-blank尾结束

●uniq
-i：忽略大小写
-c：计数
-f：指定从哪个域开始比较(从0开始)

●join  -1 N1 FILE1 -2 N2 FILE2
-i：忽略大小写
-t：指定分隔符
N1、N2：指定两文件比较的域
FILE1或FILE2可以为-，代表此文件从管道读取

●paste FILE1  FILE2
-t：指定分隔符

●cut
-d：指定分隔符
-f：指定截取的域，可使用逗号与减号
-c n-m：指定取出第n-m个字符

●wc
-l：行数
-w：单词数
-m：字符数

编辑三剑客
●grep
-E：扩展正则表达式
-A：显示之后几行
-B：显示之前几行
-C：显示之前和之后几行
-i：忽略大小写
-n：显示行号
-c：计数
-v：反向，显示不匹配的
-q：静默模式

●awk
-F：分隔符，支持[]通配符
-f：读取脚本文件
-v  var=val
▪例：
    awk '模式{语句块;} 模式{语句块;}' FILE
▪模式：
    BEGIN、END、!/pattern/、rlt-expr
    ▪支持/pattern1/&&/pattern2/与$N~/pattern/
    ▪BEGIN执行在打开文件前，故无需文件输入
▪变量：C风格变量
    定义：var=val，arr[i]=val，map[key]=val
▪内置变量
    ARGC
    ARGV
    RS：行分隔符(默认\n)
    FS：字段分隔符(默认blank)
    ORS：输出的行分隔符(默认\n)
    OFS：输出的字段分隔符(默认 , )
    NR：行数
    FNR：当前文件的行数
    NF：字段数
    OFMT：数字输出格式(默认%.6g)
    IGNORECASE：为true则忽略大小写
    $N：第N个字段，0为整行
▪运算符
    ^：求幂
    ~：模糊匹配
    ~!：模糊不匹配
    空格：字符连接
    in：确认数组键值
    | ：管道
    <、>、>>：重定向，关系运算符要用括号以区分
▪关键字
    ▪print：逗号替换为OFS，默认带\n
    print "$1:\t"$1,$2
    ▪printf：参数类似C中printf函数
    printf "$1:%s\n",$1
    ▪next：读取下一行并回到脚本开始处重新执行
    ▪delete：删除数组元素
    ▪break/continue
    ▪getline
    "cmd" | getline var ：若不加变量则直接赋值给$0
    getline var < "file" ：同上
▪语句
    ▪C风格语句
    ▪for( i in arr )
    ▪函数
    ▪srand(); rand()
    前者默认以时间作种，后者返回0-1的浮点数
    ▪length(string); length(array)
    检查字符串与数组的长度
    ▪sub(/pattern/, "string", var); gsub(...)
    将var中匹配的pattern替换为string，后者全部替换
    ▪index(var, "string")
    string在var中出现的位置(1开始)，无则返回0
    ▪substr(var, pos, length)
    截取子串，从pos开始的length个字符(1开始)，无length则到结尾
    ▪tolower(s); toupper(s)
    ▪注意
    变量无需声明，初值为空，参与运算时置0；
    数组下标从1开始；
    数组键值为字符串时需引号，否则键值in替换当做变量
    参与运算时数组下标自动建立，故检查下标是否存在用in；
    关系运算符要两边都是数字才进行数值比较；

●sed
-f：指定脚本文件
-i：修改原文件
-n：仅显示处理结果，只有a i c r p操作才输出
-r：支持扩展正则表达式
▪例：
    sed '模式{语句块;}; 模式{语句块;}' FILE
▪模式
    支持!/pattern/与类vim范围
    支持\<与\>元字符
▪语句块
    块内操作用分号分隔，块间也需要分号分隔
    a; i; c; r; w;操作只能单独存在，不能在块中
    替换模式：
    ▪支持转义字符
    ▪&代表match，\N代表match[N]
    ▪替换标记：无g全部，Ng第N个
▪操作
    a\与i\：行后与行前添加字符串
    c\：会把所有匹配行转换成只有一个字符串
    s/pattern/replace/g
    d：删除匹配行
    r/w file：读取file到行后，写入匹配行到file
    n：跳转到下一行，执行后续操作
    =：行前打印行号
    q：退出
    N：读取下一行至模板块，形成多行组，并将行号改为新加行的行号
    P/D操作：分别用于多行组，打印与删除第一行
    h：拷贝模板块到缓冲区(模板块即当前处理的行)
    H：追加模板块到缓冲区
    g：获得内存缓冲区的内容替代当前行
    G：获得内存缓冲区的内容追加到当前行后


●pacman
▪更新数据库
    ▪-Sy：同步源
    ▪-Fy：同步基础数据
▪查询软件包
    ▪-Ss：模糊搜索远程数据库
    ▪-Si：从远程数据库获取目的包的详细信息
    ▪-Sl：列出目的仓库所有包
    ▪-Qs：模糊搜索本地数据库
    ▪-Qi：从本地数据库获取目的包的详细信息
    ▪-Qc：查看目的包更新日志
    ▪-Qg：查看软件包组中的包
    ▪-Ql：查看目的包的文件安装路径
    ▪-Qo：查询目的文件所属包
    ▪-Qu：查询所有需要升级的包
▪安装软件包
    ▪-S：远程下载并安装，若以安装则用本地包重装
    ▪-Sw：只下载软件包
    ▪-U：安装已下载的软件包
    ▪-Su：更新软件包
▪删除软件包
    缓存位于：/var/cache/pacman/pkg/
    ▪-R：删除目的包
    ▪-Rc：还包括依赖它的包
    ▪-Rs：还包括只被它依赖的包
    ▪-Rn：还包括其配置文件
    ▪-Sc：清理未安装的软件包
    ▪-Scc：清理所有软件包与数据库
▪从iso文件安装软件包
    ▪mount  -o  ro,loop  /path/to/iso  /mnt/iso
    ▪/etc/pacman.conf
    [custom]     #添加在其他仓库之前
    Server = file:///mnt/iso/arch/pkg
    ▪pacman  -Sy


○窗口：
▪使所有窗口等高等宽：^W=
▪设置当前窗口：
    减少/增加高度：^W -、^W +
    减少/增加当前窗口宽度：^W <、^W >
    设置高度/宽度 ：{高}^W _ 、{宽}^W |
▪操作窗口：
    ^W c：:close
    ^W o：:only
    ^W s：:sp
    ^W v：:vs

○标签页：
▪常用命令
    :tabe，:tabn，:tabp，:tabd

○缓冲区：已激活、已列出、已载入、未命名
▪查看：:ls
    %当前/#轮换，a激活/h隐藏，=只读，+已更改
▪常用命令
    :ene，:e，:bd，:bn，:bp，:qa，:wa
▪参数列表
    :args，:arga，:argd
    :argdo

○插入模式
▪进入：i，a，I，A，o，O
▪特殊字符：(命令模式也适用)
    ^V+特殊字符（MS下^Q）
    ^V+字符编码：0，x，u，U
    ^K+二合字符
    查看：:digraphs，ga，g8
▪暂入普通模式：^O
▪粘贴：^R + 寄存器
▪删除：^W、^U

○可视模式：
▪进入：v，^V
▪移动：
    o：到对角线端点
    O：块选取模式下，到同行的另一个端点
▪全行插入：
    I/A：块选取模式下，插入到选取块的左/右

○替换模式
▪进入：R
▪退出：<Esc>

○普通模式
▪操作：d，c，y
▪移动：0，^，$，w，W，b，B，e，f，F，%，)，}，gg，G
▪对象：（i/a）w，s，p，(，{，[，<，"，'，`
▪删除：x，s，D，C，dd，S
▪修改：r，~，gu，gU，J
▪粘贴：p，P
▪换页：^F，^D，^E，^B，^U，^Y
▪撤销：u，^R，g-，g+
▪g命令：
    gq：排版
    gQ：进入Ex模式，:vi退出

○命令模式
▪进入：:
▪外部命令：!cmd
    利用r/w，读取外部命令结果/提供给外部命令输入
▪外部过滤：{范围}!cmd
    选中区域作过滤器输入和输出(覆盖)
▪:g：模式匹配执行命令，默认范围整个文件
▪:g!：匹配不包含的行
▪:s：模式匹配字符替换，默认范围本行，
    s_flags：e不报错，g全替换，i忽略大小写，
▪:r/w：范围表示read到范围行后，write指定范围
▪:X：设置密码，为空解除
▪:saveas：以新文件名保存
▪^F：命令历史窗口(<CR>执行，^C退出)

○范围
▪先输入数字后再键入:冒号
▪%：整个文件
▪0：第一行行前
▪$：最后一行
▪ .：当前行
▪ -/+n：当前行前/后n行
▪ 'm：标签行
▪/^foo/+1：模式匹配行
▪/foo//bar//quux/：多次模式匹配行
▪?^$?+1：前向匹配行

○寄存器
▪查看：:reg
▪使用：" + □ + y/p
▪寄存器：
    用户：a-z和A-Z（大写用来向寄存器添加）
    系统：*(选择区) 和 +(剪切板)
    只读：%文件、. 修改、: 命令、/搜索
    数字：0为最近一次复制，1-9最近1-9次删除

○宏录制
▪录制：q+□+操作+q
▪使用：@+□，@@
▪特殊：. 执行上次修改操作

○标记与跳转
▪查看：:marks 与 :jumps
▪标记：m + 字母
▪跳转：' + 标记
▪标记：
    用户：字母（大写全局）
    上次跳转：'
    上次修改：.
    上次修改或复制：[或]
    上次插入：^
    上次关闭："
    返回较旧跳转：CTRL-O（全局）
    返回较新跳转：CTRL-I（全局）

○快速查找
▪*和#：当前单词，前向和后向
▪/和?：正向和反向正则匹配
▪gd和gD：函数内/外查找声明
▪K：快速查找help

○元数据文件
▪swap文件
    set noswapfile
▪backup文件
    set nobackup
▪undo文件
    set undofile
    set undodir=$HOME/.vim/undo
▪viminfo文件
    set viminfo='100,<50,s10,h,n$HOME/.vim/viminfo
    set history=1000
    保存标记文件数、寄存器保存行数、寄存器最大字节、启动时关闭hlsearch、viminfo文件名、搜索/命令/输入历史
▪session文件
    :makesession mysession.vim
    :source mysession.vim

○代码缩进
▪配置：
    filetype indent on：自适应不同语言缩进
    set autoindent：基于上行缩进
    set expandtab：空格代替tab，:retab恢复本行tab
    set tabstop=8：默认的tab宽，不足则为空格
    set softtabstop=4：键入的tab宽
    set shiftwidth=4：缩进的tab宽

○代码折叠
▪配置
    set foldmethod=syntax：基于语法折叠
    set nofoldenable：启动vim时不开启折叠
▪常用命令：
    za：切换折叠状态
    zM：折叠所有代码
    zR：取消所有折叠

○基于Tags跳转
▪配置：
    set tags=./.tags;,.tags
▪操作：
    ^}：直接本窗口跳转
    ^W } ：打开preview窗口跳转
    g]：显示跳转选项
○基于Cscope跳转
▪配置：
    cs add ~/Projects/.cscope.out
    set nocst
    set cscopequickfix=
    set csre
▪操作
    cs find s/g/d/c/a 符号

○文件跳转
▪配置：
    set path= ：vim搜寻文件名，**表示递归搜索
▪操作：
    gf ：还可下载URL

○命令别名
▪形式：:command oldcmd Newcmd
▪参数：-nargs=0/1/*/?/+ 
    <args>：用命令别名的参数代替该位置
    <q-args>："str \'str\' "
    <f-args>："str","str"
▪默认范围：-range/-range=%

○自动命令
▪形式：:autocmd [group] {events} {file_pattern} [nested] {command}
▪查询：不加{command}

○键映射
▪映射按键若局部冲突会导致vim等待
▪映射<leader>：let mapleader="\\"
▪禁用映射：映射到<nop>
▪<silent>、<buffer>、<expr>

配置
○runtimepath目录结构
▪查看：:scriptnames
▪:filetype plugin indent on
    加载filetype.vim与script.vim：/ftdetect/*.vim
    加载ftplugin.vim：/ftplugin/
    加载indent.vim：/indent/*.vim
▪:syntax enable，:syntax on
    加载/syntax/*.vim
▪:set loadplugins
    加载/plugin/*.vim
▪:set packpath=，:packadd，:helptags doc/
    /pack/foo/start/bar/类vim目录/
    /pack/foo/opt/bar/类vim目录/
▪/autoload/*.vim
    存放自动载入的函数，调用时使用
    :call dirname#filename#funcname()
▪/ftplugin/
    <filetype>.vim
    <filetype>_<name>.vim
    <filetype>/<name>.vim


○其他配置
▪set textwidth= ：每行宽度
▪set sidescroll=：长行未回绕时每次右移几格
▪set autowrite ：切换自动保存
▪set gcr=a:block-blinkon0：禁止光标闪烁
▪set spell：拼写检测
▪set modeline=：在加载文件时首尾搜索配置
▪set fileformats=unix,dos,mac
▪set key=：为空取消密码
▪set autochdir：自动切换工作目录
▪set encoding：设置字符编码

○变量
▪变量作用域
    g:var - 全局
    a:var - 函数参数
    l:var - 函数局部变量
    b:var - buffer 局部变量
    w:var - window 局部变量
    t:var   - tab 局部变量
    s:var - 当前脚本内可见的局部变量
    v:var - Vim 预定义的内部变量
▪$环境变量，&选项值
▪整数：32为有符型，支持八/十/十六进制
▪浮点数：支持科学记数法
▪字符串：
    NULL结尾，支持转义序列，且有" 与 ' 形式
    用 . 连接字符串与变量替换
    非零数字开头会转换为非零子串对应的数值，否则为0
▪函数引用：大写首字母
▪有序列表：[00，'10'，[20，21]]
▪无序字典：{'key':'value'，}

○函数
▪调用：
    :call Func(args)
    :echo Funcname(args)
    let My=function("Func")，call(Myfunc，[])
▪range：
    a:firstline，a:lastline
▪dict：
    self：将函数引用装入字典，self指代该字典

○语句
    ▪if语句
    ▪for语句
    ▪while语句
    ▪try-catch语句

○特性
    ▪foo_{val}_bar：先计算val后字符替换
