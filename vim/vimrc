filetype plugin indent on       " 设置加载对应文件类型的插件
syntax enable                   " 开启语法高亮功能
syntax on                       " 自动语法高亮

set nocompatible                " 设置不兼容原始vi模式
set ignorecase                  " 搜索时忽略大小写
set smartcase                   " 搜索时有大写才大小写敏感
set hlsearch                    " 搜索高亮
set incsearch                   " 搜索时及时跳转
set nowrapscan                  " 搜索到头不自动折返再搜索
set nu                          " 显示当前行号
set rnu                         " 显示相对行号
set laststatus=2                " 显示状态栏
set noshowmode                  " 不显示当前模式，Airline会显示
set noruler                     " 不显示光标当前位置，Airline会显示
set showcmd                     " 显示当前未完成命令的按键
set cmdheight=1                 " 设置命令行的高度
set list                        " 显示空白符
set listchars=tab:▸\ ,trail:·,extends:↷,precedes:↶      " 设置空白符如何显示
set lazyredraw                  " 关闭不必要的屏幕重绘
set wildmenu                    " 命令行补全文件名
set wildignorecase              " 补全忽略大小写
set showmatch                   " 左括号匹配，无则响铃
set matchtime=0                 " 括号匹配时间，单位0.1s
set nowrap                      " 长行超屏而非回绕，用<leader>w切换
" set linebreak                 " 回绕时避免断词
set scrolloff=0                 " 保持n行始终在光标之下或之上
set autochdir                   " 自动切换工作目录
set mouse=a                     " 启用鼠标
set path=/usr/include/c++/9.2.0,. " 设置PATH目录方便跳转
set whichwrap=<,>,[,]           " 允许插入模式与普通模式光标在从首尾跨行
set backspace=indent,eol,start  " 允许<BS>键在插入模式删除：行首空白符、换行符、进入插入模式时光标之前的字符
set virtualedit=block,onemore   " 光标可出现在无字符空间：块选取模式，其它模式最多只允许出现在最后一个字符之后的位置
set hidden                      " 切换tab时自动隐藏当前buffer
set foldmethod=indent           " 设置折叠方式
set nofoldenable                " 启动vim时不开启折叠
set autoindent                  " 基于上行的缩进
set tabstop=8                   " 默认的tab宽，不足则为空格
set softtabstop=4               " 键入的tab宽
set shiftwidth=4                " 缩进的tab宽
set expandtab                   " 用空格代替tab，:retab恢复本行

"读取缓冲区时回到上次离开时的位置
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" 读取vim命令行的输出到当前文件缓冲区
command! -nargs=* Rcmd :let tmp=<q-args> | put =execute(tmp)

" sudo写入文件
command! W execute 'w !sudo tee % > /dev/null'

" 若外层为tmux，则可适当降低等待延迟，因为tmux已经处理了按键延迟的问题
if $TMUX != ''
    set ttimeoutlen=20
else
    set ttimeoutlen=50
endif


"================================
" => 设置临时文件
"================================
set viminfo='100,<50,s10,h,n$HOME/.vim/viminfo
set history=500
set noswapfile
set nobackup
set undofile


"================================
" => Buffer切换
"================================
nnoremap <silent> <space>n :bn<CR>
nnoremap <silent> <space>b :bp<CR>
nnoremap <silent> <esc>1 :b 1<CR>
nnoremap <silent> <esc>2 :b 2<CR>
nnoremap <silent> <esc>3 :b 3<CR>
nnoremap <silent> <esc>4 :b 4<CR>
nnoremap <silent> <esc>5 :b 5<CR>
nnoremap <silent> <esc>6 :b 6<CR>


"================================
" => Tab切换
"================================
nnoremap <silent> <leader>n :tabnext<CR>
nnoremap <silent> <leader>b :tabprevious<CR>
nnoremap <silent> <leader>1 :tabnext 1<CR>
nnoremap <silent> <leader>2 :tabnext 2<CR>
nnoremap <silent> <leader>3 :tabnext 3<CR>
nnoremap <silent> <leader>4 :tabnext 4<CR>
nnoremap <silent> <leader>5 :tabnext 5<CR>


"================================
" => Window切换
"================================
function! Jump(i) abort
    if winnr('$') >= a:i
        exe a:i . 'wincmd w'
    endif
endfunction
nnoremap <silent> <space>1 :call Jump(1)<CR>
nnoremap <silent> <space>2 :call Jump(2)<CR>
nnoremap <silent> <space>3 :call Jump(3)<CR>
nnoremap <silent> <space>4 :call Jump(4)<CR>
nnoremap <silent> <space>5 :call Jump(5)<CR>
nnoremap <silent> <space>6 :call Jump(6)<CR>
nnoremap <silent> <tab> :wincmd w<CR>


"================================
" => 普通模式快捷键
"================================
nnoremap  10
nnoremap  10
nnoremap  <home>
nnoremap  <end>
nnoremap <silent> , vy
nnoremap <silent> Y y$
nnoremap <silent> <space>o  :<c-u>put =repeat(nr2char(10), v:count1)<CR><up>
nnoremap <silent> <space>O  :<c-u>put! =repeat(nr2char(10), v:count1)<CR><down>
nnoremap <silent> <Leader>h :nohl<CR>
nnoremap <leader>m  :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>

function! ToggleWrap()
    if &wrap == 1
        setl nowrap
    else
        setl wrap
    endif
endfunction
nnoremap <silent> <Leader>w :call ToggleWrap()<CR>

function! ToggleVirtuledit()
    if &Virtuledit =~ "all"
        setl virtualedit=block,onemore
    else
        setl virtualedit=all
    endif
endfunction
nnoremap <silent> <leader>v :call ToggleVirtuledit()<CR>


"================================
" => 插入模式快捷键
"================================
inoremap <c-a> <home>
inoremap <c-e> <end>
inoremap <c-u> <c-o>d^
inoremap <c-k> <c-o>d$
inoremap <c-d> <c-o>10<c-e>
inoremap <c-b> <c-o>10<c-y>


"================================
" => 命令模式快捷键
"================================
cnoremap <c-a> <c-b>


"================================
" => 可视模式快捷键
"================================
vnoremap <c-a> 0
vnoremap <c-e> $
vnoremap <c-c> "+y


"================================
" => 终端VIM的配置
"================================
if !has("gui_running")

    " 写入vimrc时自动读取配置，增加++nested以解决Airline写回文件时导致的颜色失调问题，与Airline的random主题冲突
    " autocmd BufWritePost $MYVIMRC ++nested source $MYVIMRC

    set autochdir
    let g:airline_theme="random"
    colorscheme ron

    " 插入模式与普通模式的光标形状切换
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"
    " 其他选项（替换\ _ [后）的数字：
    " Ps = 0  -> blinking block.
    " Ps = 1  -> blinking block (default).
    " Ps = 2  -> steady block.
    " Ps = 3  -> blinking underline.
    " Ps = 4  -> steady underline.
    " Ps = 5  -> blinking bar (xterm).
    " Ps = 6  -> steady bar (xterm).

endif


"================================
" => AutoPairs配置
"================================
" 自带的切换快捷键在tmux中用不了
nnoremap <leader>ap :call AutoPairsToggle()<CR>


"================================
" => Devicons配置
"================================
let g:webdevicons_enable_startify = 1
let g:webdevicons_enable_airline_tabline = 1
let g:webdevicons_enable_airline_statusline = 1
let g:webdevicons_enable_nerdtree = 1


"================================
" => IndentLine配置
"================================
let g:indentLine_fileType = ['c', 'cpp']
nnoremap <silent> <leader>il :IndentLinesToggle<CR>


"================================
" => Undotree配置
"================================
nnoremap <silent> <F4> :UndotreeToggle<CR>


"================================
" => Airline配置
"================================
let g:airline_powerline_fonts = 1
let g:airline_detect_spell=0
let g:airline_extensions = ['branch', 'tabline']


"================================
" => LeaderF配置
"================================
let g:Lf_WindowHeight = 0.2
let g:Lf_GtagsAutoGenerate = 1
let g:Lf_RootMarkers = ['.git', '.svn', '.root']    " 有这些文件或目录的目录即判定为项目根目录，并为项目中所有符合规定的文件生成gtags
let g:Lf_WildIgnore = {
        \ 'dir': ['.svn', '.git'],
        \ 'file': ['.root', '*.bak', '*.save', '*.exe', '*.o', '*.so']
        \}
set cscopeprg=/usr/local/bin/gtags-cscope
set cscopequickfix=s-,c-,d-,i-,t-,e-,a-
set nocst
nnoremap <silent> <leader>ff :Leaderf function --all<CR>
nnoremap <silent> <leader>ft :Leaderf Buftag --all<CR>
nnoremap <silent> <leader>fz :Leaderf <CR>
nnoremap <silent> <leader>fg :Leaderf gtags<CR>
nnoremap <silent> <leader>fc :Leaderf gtags --grep<CR>
nnoremap <silent> <leader>fu :Leaderf gtags --update<CR>
nnoremap <silent> gr :Leaderf! gtags -r  <c-r>=expand('<cword>')<cr> --auto-jump<cr>
nnoremap <silent> gd :Leaderf! gtags -d  <c-r>=expand('<cword>')<cr> --auto-jump<cr>
nnoremap <silent> gs :Leaderf! gtags -s  <c-r>=expand('<cword>')<cr> --auto-jump<cr>
nnoremap <silent> <space>ca :cscope find a  <c-r>=expand('<cword>')<cr><cr>
nnoremap <silent> <space>cg :cscope find g  <c-r>=expand('<cword>')<cr><cr>
nnoremap <silent> <space>cc :cscope find c  <c-r>=expand('<cword>')<cr><cr>
nnoremap <silent> <space>ct :cscope find t  <c-r>=expand('<cword>')<cr><cr>
nnoremap <silent> <space>ce :cscope find e  <c-r>=expand('<cword>')<cr><cr>
nnoremap <silent> <space>cf :cscope find f  <c-r>=expand('<cfile>')<cr><cr>
nnoremap <silent> <space>ci :cscope find i ^<c-r>=expand('<cfile>')<cr>$<cr>
nnoremap <silent> <space>cd :cscope find d  <c-r>=expand('<cword>')<cr><cr>
command! Csh :echo "
            \ \n s   symbol    ：查找该符号的引用
            \ \n g   global    ：查找该符号的定义
            \ \n a   assign    ：查找该符号被赋值的位置
            \ \n c   calls     ：查找调用当前函数的位置
            \ \n d   depends   ：查找当前函数调用的函数
            \ \n i   includes  ：查询引入了当前文件的文件
            \ \n f   file      ：打开文件名
            \ \n t   text      ：查找出现该字符串的位置
            \ \n e   egrep     ：使用 egrep 搜索当前单词
            \ 快捷键以 <space>c 开头加上述字母
            \ 需要时请手动cs add <gtags_db_file>，此文件会由Leaderf自动生成在~/.LfCache/gtags/\%path\%to\%project\%root/GTAGS
            \"



"================================
" => vim-plug配置
"================================
call plug#begin('~/.vim/plugged')

Plug 'mhinz/vim-startify', { 'on': [] }                 " 无参数时vim的引导界面
Plug 'vim-airline/vim-airline'                          " 状态栏与标签栏插件
Plug 'vim-airline/vim-airline-themes'                   " 上述插件颜色主题
Plug 'kien/rainbow_parentheses.vim', { 'on': [] }       " 彩虹颜色显示嵌套括号
Plug 'Yggdroot/indentLine', { 'on': [] }                " 缩进线，增强代码缩进的视觉化，按 <leader>il 打开或关闭
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }      " 撤销数可视化，引入分支的概念，类似git一样跳转与撤销，按 <F4> 打开或关闭
Plug 'jiangmiao/auto-pairs'                             " 自动补全结对符，括号、引号之类的，有时会影响正常编辑，按 <leader>ap 打开或关闭
Plug 'octol/vim-cpp-enhanced-highlight', { 'on': [] }   " C++代码的语法高亮增强版，包括来模板、重载、新标准关键字之类
Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle' }      " 显示代码中所有的标识符，函数、类、类成员、宏之类的，按 <F2> 打开或关闭，可以在本vimrc中打开查看按键映射，用户命令
Plug 'preservim/nerdtree', { 'on':  'NERDTreeToggle' }  " 显示文件层次结构，选择打开文件或切换目录，按 <F3> 打开或关闭
Plug 'tiagofumo/vim-nerdtree-syntax-highlight', { 'on':  'NERDTreeToggle' } " 上述插件语法高亮增强
Plug 'preservim/nerdcommenter'                          " 按 <leader>cc 注释该行代码，按 <leader>cu 取消注释
Plug 'SirVer/ultisnips', { 'on': [] }                   " 输入代码片段缩写后按 <M-D> 自动补全完整代码，可以按snips的语法自己添加片段
Plug 'honza/vim-snippets', { 'on': [] }                 " 上述插件的代码片段
Plug 'dense-analysis/ale', { 'on': [] }                 " 动态语法检测，需要自己修改配置，本配置默认用于C/C++，目前(2020-2)ALE还有bug，cppcheck与clangtidy的提示不显示
Plug 'https://gitee.com/mirrors/youcompleteme.git', { 'on': [] } " 基于标签和语义的代码补全，需要自己修改配置，本配置默认用于C/C++，该项目较大且下载速度较慢，Arch/Manjaro的源里有该插件vim-youcompleteme，若源码安装需要进入安装目录执行./install.py
Plug 'Shougo/echodoc.vim', { 'on': [] }                 " ycm补全后在原本命令行的位置显示函数参数提示
Plug 'Yggdroot/LeaderF', { 'do': './install.sh', 'on': 'Leaderf' }       " 快速搜索文件 <leader>fz，标识符 <leader>ft，代码内容 <leader>fc，函数 <leader>ff 等等
Plug 'vim-scripts/fcitx.vim'                            " 若使用fcitx中文输入法框架，如搜狗输入法，此插件会在离开插入模式进入普通模式时自动切换会英文输入法
Plug 'ryanoasis/vim-devicons'                           " 会其他插件提供文件类型图形符号，官方推荐使用nerd字体
Plug 'tpope/vim-fugitive'                               " 集成git到vim
Plug 'skywind3000/asyncrun.vim', { 'on': [] }           " 异步执行外部命令，配置后用于快速编译并执行当前C++代码，<space>lr编译并执行，用命令QuickArgs设置运行参数，<space>lc只编译用于gdb调试
Plug 'kana/vim-textobj-user'                            " 此五个插件用于自定义文本对象，比如 dii 删除同缩进的代码，dif 删除函数内容，di, 删除函数参数
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-syntax'
Plug 'sgur/vim-textobj-parameter'
Plug 'kana/vim-textobj-function', { 'for':['c', 'cpp', 'vim', 'java'] }
Plug 'jacoborus/tender.vim'                             " 以下是支持真色的配色方案
Plug 'rakr/vim-one'
Plug 'drewtempelmeyer/palenight.vim'
Plug 'KeitaNakamura/neodark.vim'
Plug 'iCyMind/NeoSolarized'
Plug 'crusoexia/vim-monokai'
Plug 'morhetz/gruvbox'

call plug#end()
