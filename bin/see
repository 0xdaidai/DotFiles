#!/bin/bash

function usage() {
    echo -e "\e[32mDescription\e[m:
    \e[36msee\e[m will find cheat sheet among ~/.cheat/*.md
    Yes, the format of cheat sheets is \e[36mmarkdown\e[m.
    Each entry starts on a line that is first level list like \e[34m'^\* .*$'\e[m in regex,
    and end with blank label like \e[34m'^<!-- -->$'\e[m in regex.
    \r\e[32mUsage:\e[m
    see [<options>] <regex>
    \r\e[32mOptions\e[m:
    \e[36m-h\e[m                : display this help information
    \e[36m-l\e[m                : list only titles of all available entries match \e[36m<regex>\e[m
    \e[36m-f\e[m <file-prefix>  : specify a file in ~/.cheat/ to search, suffix '.md' is unnecessary
    \e[36m-w\e[m                : Point out that the regex you give is a complete word, not a part of a word\n"
    exit 1
}

while : ;do
    while getopts ":hlwf:" opt ;do
        case "$opt" in
            "h")
                help_flag=1
                usage
                ;;
            "l")
                list_flag=1
                ;;
            "w")
                word_flag=1
                ;;
            "f")
                specific_file="$OPTARG"
                ;;
            ":")
                echo -e "$0: \e[31mRequired an argument -- $OPTARG\e[m"
                usage
                ;;
            "?")
                echo -e "$0: \e[31mUnknown option -- $OPTARG\e[m"
                usage
                ;;
        esac
    done

    if [[ "$OPTIND" -ne $(($# + 1)) ]] ;then
        eval curEntry=\$$OPTIND
        cmdOpts[${#cmdOpts[@]}]=$curEntry
        ((++OPTIND))
    else
        break
    fi
done

cheat_files="$HOME/.cheat/*.md"
if [[ -n "$specific_file" ]] ;then
    cheat_files="$HOME/.cheat/$specific_file*.md"
    if [[ "${#cmdOpts[@]}" -eq 0 && -z "$list_flag" ]] ;then    # -f == -lf
        list_flag=1
    fi
fi

if [[ -n "$word_flag" ]] ;then
    word_pattern_l='((^\* )(.*[^0-9A-Za-z_])|(^\* ))'
    word_pattern_r='($|[^[^0-9A-Za-z_].*)'
else
    word_pattern_l='((^\* )(.*)())'
    word_pattern_r='(.*)'
fi

if [[ -n "$list_flag" ]] ;then
    if [[ ${#cmdOpts[@]} -eq 0 ]] ;then # -l | -lf
        for search_file in $cheat_files ;do
            echo -e "\e[32m📖️  $search_file\e[m"
            sed -rn "/^\* [^* ]+/{s/\* /[31;1m*[m /;p}" $search_file
        done
    else    # -l e | -lf e
        for search_file in $cheat_files ;do
            for entry in "${cmdOpts[@]}" ;do
                sed -rn "/${word_pattern_l}${entry}${word_pattern_r}/I{s/$word_pattern_l(${entry})$word_pattern_r/[31;1m\2\4[m\3[32m\5[m\6/;p}" $search_file > /tmp/see_tmp_file
            done
            if [[ -s /tmp/see_tmp_file ]] ;then
                echo -e "\e[32m📖️  $search_file\e[m"
                cat /tmp/see_tmp_file
            fi
        done
    fi
    exit 0
fi

if [[ "${#cmdOpts[@]}" -eq 0 ]] ;then
    usage
    exit 1
fi

for search_file in $cheat_files ;do
    for entry in "${cmdOpts[@]}" ;do
        sed -rn "/${word_pattern_l}${entry}${word_pattern_r}/I,/<!--.*-->/p" $search_file | sed -r '/<!--.*-->/s/^.*$//;
        /[^[:upper:][:lower:][:digit:]_](\.|::)[[:upper:][:lower:][:digit:]_]+/s/([^[:upper:][:lower:][:digit:]_])(\.|::)([[:upper:][:lower:][:digit:]_]+)/\1[32m\2[m\3/g;
        /([^`*]|^)(\*{1,3})(\S[^*]*\S|\S)\2([^`*]|$)/s/([^`*]|^)(\*{1,3})(\S[^*]*\S|\S)\2([^`*]|$)/\1[1;3m\3[m\4/g;
        /([^`]|^)<u>([^<]+|.*\\<.*)<\/u>([^`]|$)/s/([^`]|^)<u>([^<]+|.*\\<.*)<\/u>([^`]|$)/\1[4:3m\2[m\3/g;
        /([^`]|^)<kbd>([^<]+|.*\\<.*)<\/kbd>([^`]|$)/s/([^`]|^)<kbd>([^<]+|.*\\<.*)<\/kbd>([^`]|$)/\1[7m\2[m\3/g;
        /([^`]|^)~~[^~]+~~([^`]|$)/s/([^`]|^)~~([^~]+)~~([^`|$])/\1[9m\2[m\3/g;
        /^[*+-] .+$/s/^\* (.+)$/[1;33m*[36m \1[m/;
        /^ {1,4}[*+] .+$/s/^( {1,4})\*/\1[35m*[m/;
        /^ {5,8}[*+] .+$/s/^( {5,8})\*/\1[34m*[m/;
        /^ {9,12}[*+] .+$/s/^( {9,12})\*/\1[36m*[m/;
        /(^\s*[^>[:space:]].*|^\s*)(`+)[^`]+\2/s/(`+)([^`]+)\1/[48;5;242m\2[m/g;
        /^\s*> .+/s/^(.*)$/[38;5;249m\1[m/;
        /^\s*```\w*$/s/```(\w*)/[31m`[33m`[32m`[38;5;208m\1[m/;
        ' > /tmp/see_tmp_file
        # 作用依次是：
        #   删除空白标签
        #   凸显成员函数与作用域运算符
        #   italic,bold元素显示为bold&italic，应该在列表标签之前以避免已被修改的`*`导致判断错误
        #   underline元素显示为undercurl
        #   keyboard元素显示为reverse
        #   删除线
        #   "一"级列表
        #   "二"级列表
        #   "三"级列表
        #   "四"级列表
        #   code元素显示为灰暗色背景且在quote区块中不转换，应该在quote之前以避免已被修改的`>`导致判断错误
        #   quote标签显示为灰暗色
        #   code标签显示为彩色
    done
    if [[ -s /tmp/see_tmp_file ]] ;then
        echo -e "\e[32m📖️  $search_file\e[m"
        cat /tmp/see_tmp_file
    fi
done

# vim: filetype=sh

