#!/bin/bash

while getopts ":whpf:" opt ;do
    case $opt in
        "h")
            help_flag=1 ;;
        "w")
            word_flag=1 ;;
        "f")
            specific_file=$OPTARG ;;
        ":")
            echo -e "$0: \e[31mRequired an argument -- $OPTARG\e[m"
            help_flag=1 ;;
        "?")
            echo -e "$0: \e[31mUnknown option -- $OPTARG\e[m"
            help_flag=1 ;;
    esac
done

eval entry=\$$OPTIND
((++OPTIND))
eval entry_numr=\$$OPTIND
# -h选项，选项出错，-f无参数，entry为空
if [[ $help_flag == 1 || -z "$entry" && -z "$specific_file" ]] ;then
    if [[ -z "$entry" && $help_flag != 1 ]] ;then
        echo -e "$0: \e[31mRequired <entry>\e[m"
    fi
    echo -e "\e[32mDescription\e[m:
    \e[36msay\e[m will open your \$EDITOR (vim|nvim|nano) to modify a entry that you specified in a cheat sheet.
    If there are more than 1 entry have found, type a num to choose one, or give the num in parameter after <entry>
    \r\e[32mUsages\e[m:
    \e[33m$\e[m \e[32msay\e[m \e[36m<options>.. <entry> [<num>]\e[m
    \e[33m$\e[m \e[32msay\e[m \e[36m-f <file>\e[m

    -h      : list this help_flag menu
    -p      : the <entry> must be a prefix of entry name
    -f      : specify a file in ~/.cheat/ to search, suffix '.md' is unnecessary\n"
    exit 0
fi

cheat_files=~/.cheat/*.md
if [[ -n "$specific_file" ]] ;then
    cheat_files=~/.cheat/$specific_file*.md
    if [[ -z "$entry" ]] ;then
        $EDITOR $cheat_files
        exit 0
    fi
fi
if [[ $word_flag == 1 ]] ;then
    word_pattern='\b'
else
    word_pattern='.*'
fi

line=$(grep -in "^\* $word_pattern$entry$word_pattern" $cheat_files | sed -r '/^\//s/.*:([[:digit:]]+):.*/\1/; /^[[:digit:]]/s/([[:digit:]]+):.+/\1/')
file=$(grep -i "^\* $word_pattern$entry$word_pattern" $cheat_files | sed -r 's/^(.+):.*/\1/')
if [[ $(echo $line | wc -w) -gt 1 ]] ;then
    if [[ -z "$entry_numr" ]] ;then
        grep --color -n "^\* $word_pattern$entry$word_pattern" $cheat_files | awk -F: 'BEGIN{OFS=":"} {++nr; print "\033[32m📖️ "$1," \033[36m"$2," \033[m"$3"  \033[33m("nr")\033[m"}'
        read -p "Type a num to choose one entry(default=1; not number exit): " type_numr
        if [[ "$type_numr" -gt 0 ]] ;then
            entry_numr=$type_numr
        elif [[ -z "$type_numr" ]] ;then
            entry_numr=1
        else # 不是数字
            exit 0
        fi
    fi
    line=$(echo $line | cut -d' ' -f $entry_numr)
    file=$(echo $file | cut -d' ' -f $entry_numr)
fi

$EDITOR +$line $file
