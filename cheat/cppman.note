○标准库异常
exception <exception>
├───bad_cast             <typeinfo>    ：多态引用的转换失败
├───bad_typeid           <typeinfo>    ：目标为含有虚函数的类型的空指针
├───bad_weak_ptr         <memory>      ：构造weak_ptr失败
├───bad_function_call    <functional>  ：调用无目标的function类
├───bad_alloc            <new>         ：内存申请失败
├───bad_array_new_length <new>         ：传给new的size不在有效范围
│
├───logic_error          <stdexcept>
│   │
│   ├───domain_error                   ：数学库
│   ├───invalid_argument               ：bitset构造参数无效
│   ├───length_error                   ：容器size超出限制
│   ├───out_of_range                   ：数组类型的无效索引
│   └───future_error     <future>      ：异步
│
└───runtime_error        <stdexcept>
    │
    ├───range_error                    ：wide string与byte string转换出错
    ├───overflow_error                 ：bitset转换为整型溢出
    ├───underflow_error                ：算术下溢
    └───system_error     <system_error>：并发
        │
        └───ios::failure               ：stream出错
▪成员
    ▪[31m.[mwhat()：根部基类exception的虚函数，返回const char*，异常类销毁后该C-string也不复存在
    ▪[31m.[mcode()：返回error_code类对象
▪error_code 与 error_condition 区别：可移植性，前者由编译器定义(OS相关)，后者为默认标准
    ▪error_code成员：
        ▪[31m.[mcategory()[31m.[mname()
        ▪[31m.[mvalue()
        ▪[31m.[mmessage()
        ▪[31m.[mdefault_error_condition()
        ▪[31m.[mdefault_error_condition()[31m.[mcategory()[31m.[mname()
        ▪[31m.[mdefault_error_condition()[31m.[mvalue()
        ▪[31m.[mdefault_error_condition()[31m.[mmessage()
    ▪比较：重载了与领域枚举值的比较运算符
        errc        ：<cerrno>
        io_errc     ：<ios>
        future_errc ：<future>
▪异常挂起
    ▪current_exception()    ：返回exception_ptr对象
    ▪rethrow_exception(eptr)：重新抛出exception_ptr对象
▪异常类构造参数
    ▪logic_error和runtime_error
        (const string&)
        (const char*)
    ▪system_error
        (error_code)
        (error_code, const string&)
        (error_code, const char*)
        ▪注：提供make_error_code(errc)构造error_code

○调试：<cassert>
    ▪assert(expr)               ：false则执行，expr为int constexpr
    ▪static_assert(expr, message)
    ▪#define NDEGUG
    ▪编译器预处理宏：
    __func__、__FILE__、__LINE__、__TIME__、__DATE__

○选项处理：<unistd.h>短版，<getopt.h>长版
    ▪getopt(argc，argv，optstring)
        ▪参数optstring：
            t: 代表必有参数，"紧跟"或"间隔"都被视为参数
            t::代表可选参数，只识别"紧跟"为参数
        ▪返回int：表示选项字符，'?'表示无此选项，-1表示结束
        ▪全局变量：
            optarg：指向选项的参数
            optind：指向处理的argv数组的索引
    ▪getopt_long(argc, argv, optstring, option*, int*)
        ▪参数option*：最后一个struct option必须全0
            const char *name：参数名称
            int has_arg     ：no/ required/ optional_argrument
            int *flag       ：不设为NULL则*flag=val且函数返回0
            int val         ：指定匹配到该选项时返回的int值
        ▪参数int*：传入一个int指针存放lopt下标
        ▪注：规则同上，不过"紧跟"用=区别与选项，而且长选项可不用完整输入
    ▪getopt_long_only(argc, argv, optstring, option*, int*)
        ▪注：规则同上，`-opt`会优先解析为长选项，不符合再为短

○SIMD：<immintrin.h>
▪利用alignas(32)对齐数组
▪向量寄存器抽象类型： __m256，__m256d，__m256i
▪加载到向量寄存器：
    _mm256_load_ps( float* )
    _mm256_load_pd( dounle* )
    _mm256_load_epi256( __m256i* )
▪SIMD运算：
    _mm256_OP_ps( __m256, __m256 )
    _mm256_OP_pd( __m256d, __m256d )
    _mm256_OP_epi32( __m256i, __m256i )
    _mm256_OP_epi64( __m256i, __m256i )
▪存储回内存：
    _mm256_store_ps( float* , __m256)
    _mm256_store_pd( dounle* , __m256d )
    _mm256_store_epi256( int* , __m256i )

○pair：<utility>
▪构造
    ▪支持不同实例隐式类型转换
    ▪支持移动语义
    ▪逐块式构造：std::piecewise_constructor避免与构造tuple冲突
▪比较：字典比较

○tuple：<tuple>
▪构造
    ▪支持不同实例隐式类型转换
    ▪支持移动语义
    ▪支持由pair转换
▪读取
    ▪get<N>(t)
    ▪get<T>(t)
    ▪tuple_size<TT>::value
    ▪tuple_element<N，TT>::type
▪比较：字典比较

○any：<any>
▪构造：
    ▪默认构造：构造为nullptr
    ▪支持移动构造
    ▪就地构造：std::in_place_type<>
▪读取：
    ▪[31m.[mhas_value()
    ▪[31m.[mtype()[31m.[mname()
    ▪any_cast<T&>(any)
▪修改：
    ▪operator=()
    ▪.emplace<>()
    ▪[31m.[mreset()
▪比较： 比较index值

○variant：<variant>
▪构造：
    ▪默认构造：构造第一个类型
        std::monostate类作占位符避免无默认构造函数
    ▪逐块式(唯一)构造：匹配最佳的模板参数类型
        char*匹配数值类型比string更佳
    ▪支持移动构造
    ▪就地构造：
        std::in_place_type<>
        std::in_place_index<>
▪读取：
    ▪[31m.[mindex()
    ▪get<T>(vrt)
    ▪get<N>(vrt)
    ▪get_if<T>(&variant)
    ▪get_if<N>(&variant)
    ▪注：get<>错误匹配类型会抛出异常
    ▪注：get_if<>错误匹配类型返回空指针
▪修改：
    ▪operator=()
    ▪[31m.[memplace<T>()
    ▪[31m.[memplace<T>()
▪访问：
    ▪visit(func，vrt)：func为能接受所有vrt模板参数类型的重载可调用

○optional：<optional>
▪构造：
    ▪默认构造：构造为std::nullopt
    ▪逐块式(唯一)构造
    ▪支持移动构造
    ▪就地构造：std::in_place
▪读取与修改：
    ▪operator bool()
    ▪operator*()
    ▪operator->()
    ▪[31m.[mvalue()           ：nullopt则抛出异常
    ▪[31m.[mvalue_or(type_val)：nullopt则返回type_val

○shared_ptr：<memory>
▪构造：
    ▪shared_ptr<T>(new_ptr，deleter)
    ▪make_shared<>()：目标与引用计数一次分配
    ▪拷贝/移动构造：更新引用计数
▪读取：
    ▪operator*()
    ▪operator->()
    ▪[31m.[muse_count()
▪修改：
    ▪[31m.[mreset()
    ▪[31m.[mreset(ptr)
    ▪[31m.[mreset(ptr，del)
▪类型转换：
    ▪static_pointer_cast<>()
    ▪dynamic_pointer_cast<>()
    ▪const_pointer_cast<>()
    ▪operator bool()
▪错误问题： 循环依赖 多组指向

○weak_ptr：<memory>
▪作用：
    ▪解决shared_ptr循环依赖
    ▪只能弱引用分享，不参与销毁共享对象
▪构造： weak_ptr<T>(sp)
▪读取：
    ▪operator*()
    ▪operator->()
    ▪[31m.[mexpired()：返回是否为空

○unique_ptr：<memory>
▪作用：自动安全的释放资源
▪构造：
    ▪unique_ptr<T，Del>(ptr，del)
        del默认为delete表达式
    ▪支持移动构造，拒绝拷贝构造
▪读取：
    ▪[31m.[mget()
▪修改：
    ▪[31m.[mreset()
    ▪[31m.[mreset(ptr)

○numeric_limits：<limits>
▪使用：
    ▪::lowest() ：负数
    ▪::min()    ：正数
    ▪::max()
    ▪::infinity()
    ▪::quiet_NaN()

○TypeTrait：<type_traits>
▪类型判断式
▪类型关系检验
▪类型修饰符
▪常用：decay_t<T>
▪使用：
    ▪::value返回std::true_type或std::false_type
    ▪::type返回修饰后的类型
    ▪typetrait_t<T>代替typename typetrait<T>::type
▪技巧：
    ▪通过包装函数处理/过滤类型后调用工具函数
        利用::value调用重载工具
        利用::type转换类型传递给模板或修改参数类型

○reference_wrapper：<functional>
▪构造： ref()与cref()
▪转换： 提供到目标引用的转换from&to
▪读取： [31m.[mget()：返回目标引用才能调用成员函数

○function：<functional>
▪运行时能够统一可调用类型的三种形式

○ratio：<ratio>
▪构造：预定义ratio类型
▪读取： 模板非类型参数作分子(.num)与分母(.den)
▪运算： 编译期运算、比较、化简、报错(::type与::value)
    ratio_OP<ratio1, ratio2>::

○时间库：<chrono>
▪duration
    ▪构造：time_point相减、预定义字面值
    ▪读取：[31m.[mcount()、::rep、::period
    ▪算术运算：会隐式转换为更高精度
    ▪类型转换：转为粗精度直接截断数值
        duration_cast<>()
▪Clock
    ▪构造：预定义system_clock、steady_clock等
    ▪读取：
        ▪::now()
        ▪::duration
        ▪::time_point
        ▪system_clock提供::from_time_t()与::to_time_t()
▪time_point
    ▪构造：
        ▪默认构造为epoch
        ▪Clock::now()获取
        ▪time_point与duration运算
        ▪注：由Clock提供Epoch，duration可相对为负值
    ▪算术运算
    ▪关系运算
    ▪类型转换：time_point_cast<C，D>(tp)
▪<ctime>：
    获取当前时间：time(time_t*)
    返回 tm* ：localtime(time*)、gmtime(time*)
▪<iomanip>：
    get_time(tm*，fmt)
    put_time(tm*，fmt)

○STL组件
▪容器：序列、关联、无序
    ▪异常发生：容器reallocate，元素的copy与move
    ▪异常处理：容器保证reallocate安全；对于元素产生的异常，随机访问容器无法恢复，节点式容器保证安全
▪迭代器：输出、输入、单向、双向、随机
▪泛型算法：搜索比较、更替复制、涂写删除

○array：<array>
▪特点：
    ▪随机访问
    ▪高效栈内存
    ▪容量固定*
▪构造： array未定义构造函数，只能使用聚合类初始化

○vector：<vector>
▪特点：
    ▪随机访问
    ▪尾部高效增删元素
    ▪reallocate时迭代器失效*

○deque：<deque>
▪特点：
    ▪随机访问
    ▪访问元素多一步骤*
    ▪头尾高效增删元素
    ▪reallocate更快速
    ▪自动缩减容量
    ▪容量极限更大
    ▪增删元素时可致迭代器失效*

○list：<list>
▪特点：
    ▪双向访问
    ▪随处高效增删元素
    ▪节点保证元素安全
▪技巧： 需要提供反向迭代器并应该避免边界检查，故可能实现为环式（[31m.[mend()与[31m.[mrend()指向自己）

○forward_list：<forward_list>
▪特点：
    *单向访问
    随处高效增删元素
    内存消耗更低
    节点保证元素安全
▪技巧： 无需提供反向迭代器，故无需环式，只要将最后元素*next设为nullptr（[31m.[mbefore_begin()指向自己， [31m.[mend()设为nullptr)

○Associated：<set>、<map>
▪特点：
    ▪自动排序
    ▪高效搜索
    ▪插入元素较慢*
▪严格弱序： 非对称，可传递，非自反，等效传递
▪修改：
    ▪不可修改key值和比较准则从而打乱顺序破坏结构
    ▪新插入的元素排在后面其他等价元素后面
▪map下标运算符：自动隐式构造元素

○Unordered：<unordered_set>、<unordered_map>
▪特点：
    ▪更高效搜索与安插
    ▪rehashing使迭代器失效*
▪hash函数：
    ▪functor
    ▪提供operator()(elem_type)返回size_t

○stack：<stack>
▪默认deque
▪操作：
    ▪[31m.[mpush()
    ▪[31m.[mpop()
    ▪[31m.[mtop()

○queue：<queue>
▪默认deque
▪操作：
    ▪[31m.[mpush()
    ▪[31m.[mpop()
    ▪[31m.[mfront()
    ▪[31m.[mback()

○priority_queue：<queue>
▪默认vector
▪利用heap算法（完全二叉树）
▪操作：
    ▪[31m.[mpush()
    ▪[31m.[mpop()
    ▪[31m.[mtop()

○容器操作
●构造：
    ▪默认               ：all
    ▪(initializer-list) ：all
    ▪(beg，end)         ：all-a
    ▪拷贝               ：all
    ▪移动               ：all
    ▪(num)              ：v，d，l，fl
    ▪(num，value)       ：s，v，d，l，fl
    ▪注：前三条对于A与U都可加额外参数(..., cmpPred)与(..., bnum，hasher，eqPred)

●赋值：
    ▪.operator=()                       ：all
    ▪[31m.[mfill(v)                 ：a
    ▪[31m.[massign(initializer-list)：all-a-A-U
    ▪[31m.[massign(beg，end)        ：all-a-A-U
    ▪[31m.[massign(num，value)      ：all-a-A-U

●访问：
    ▪[31m.[mat(idx)         ：S
    ▪[31m.[mat(key)         ：Map
    ▪operator[](idx)            ：S
    ▪operator[](key)            ：Map(自动创建key)
    ▪[31m.[mfront()         ：a，v，d，l，fl
    ▪[31m.[mback()          ：a，v，d，l
    ▪[31m.[mdate()          ：a，s，v
    ▪[31m.[mbegin()，[31m.[mcbegin()，[31m.[mend()，cend()    ：all
    ▪[31m.[mrbegin()，[31m.[mcrbegin()，[31m.[mrend()，crend()：all-U-fl

●插入：
    ▪[31m.[minsert(pos，value)            ：all
    ▪[31m.[minsert(pos，num，val)         ：s，v，d，l
    ▪[31m.[minsert(pos，initializer-list) ：s，v，d，l
    ▪[31m.[minsert(pos，beg，end)         ：s，v，d，l
    ▪[31m.[minsert(value)                 ：A，U(非multi返回pair<i，bool>)
    ▪[31m.[minsert(initializer-list)      ：A，U
    ▪[31m.[minsert(beg，end)              ：A，U
    ▪[31m.[memplace(...)                  ：A，U(非multi返回pair<iter，bool>)
    ▪[31m.[memplace(pos，args)            ：v，d，l
    ▪[31m.[memplace_hint(pos，args)       ：A，U
    ▪[31m.[memplace_back(v)               ：v，d，l
    ▪[31m.[memplace_front(v)              ：d，l，fl
    ▪[31m.[mpush_back(v)                  ：s，v，d，l
    ▪[31m.[mpush_front(v)                 ：d，l，fl

●删除：
    ▪[31m.[merase(v)          ：A，U(返回删除个数)
    ▪[31m.[merase(pos)        ：all-fl
    ▪[31m.[merase(beg，end)   ：all-fl
    ▪[31m.[mpop_back()        ：s，v，d，l
    ▪[31m.[mpop_front()       ：d，l，fl
    ▪[31m.[mclear()           ：all

●大小：
    ▪[31m.[mempty()                   ：all
    ▪[31m.[msize()                    ：all-fl
    ▪[31m.[mmax_size()                ：all
    ▪[31m.[mresize(num)               ：s，v，d，l，fl
    ▪[31m.[mresize(num，v)            ：s，v，d，l，fl
    ▪[31m.[mcapacity()                ：s，v
    ▪[31m.[mreserve(num)              ：s，v，U(v不能缩小)
    ▪[31m.[mshrink_to_fit()           ：s，v，d

●比较：
    ▪相等比较：all
    ▪非相等比较：all-U

●A与U特有：
    ▪[31m.[mcount(v)      ：A，U
    ▪[31m.[mfind(v)       ：A，U
    ▪[31m.[mlower_bound(v)：A
    ▪[31m.[mupper_bound(v)：A
    ▪[31m.[mequal_range(v)：A

●U特有：bucket接口
    ▪[31m.[mbucket_count()
    ▪[31m.[mmax_bucket_count()
    ▪[31m.[mload_factor()
    ▪[31m.[mmax_load_factor()
    ▪[31m.[mmax_load_factor(float)
    ▪[31m.[mrehash(bnum)
    ▪[31m.[mbucket(val)
    ▪[31m.[mbucket_size(bucktidx)
    ▪[31m.[mbegin(bucketidx)
    ▪[31m.[mcbegin(bucketidx)
    ▪[31m.[mend(bucketidx)
    ▪[31m.[mcend(bucketidx)

●l与fl特有
    ▪[31m.[mremove(v)
    ▪[31m.[mremove_if(op)
    ▪[31m.[msort()
    ▪[31m.[msort(op)
    ▪[31m.[munique()
    ▪[31m.[munique(op)
    ▪[31m.[msplice(pos，source，sourcePos)
    ▪[31m.[msplice(pos，source，sourceBeg，sourceEnd)
    ▪[31m.[mmerge(source)、[31m.[mmerge(source，cmpPred)
    ▪[31m.[mreverse()

○迭代器辅助函数：<iterator>
    ▪next(iter，n=1)
    ▪prev(iter，n=1)
    ▪distance(iter1，iter2)
    ▪iter_swap(iter1，iter2)

○反向迭代器
▪获取：容器的成员函数
    [31m.[mrbegin()，[31m.[mrend()，[31m.[mcrbegin()，[31m.[mcrend()
▪提供 [31m.[mbase()转换为正常迭代器(+1)

○插入迭代器
▪获取：通过泛型函数
    ▪back_inserter(c)
    ▪front_inserter(c)
    ▪inserter(c，pos)

○流迭代器
▪获取：类模板构造
    ▪istream_iterator<>(istream)：默认构造为end
    ▪ostream_iterator<>(ostream，delim='')：c-char*
▪注： 只是通过I/O操作符实现，而非底层I/O，迭代器保存上次读取的值

○流缓冲区迭代器
▪获取：类模板构造
    ▪istreambuf_iteratot<char>：参数 ()、(istrm)、(ibuf_ptr)
    ▪ostreambuf_iteratot<char>：参数 (ostrm)、(obuf_ptr)

○移动迭代器
▪获取：泛型函数获取
    make_move_iterator(iter)
▪作算法源区间，需要保证元素只能处理一次

○泛型算法：<algorithm>、<numeric>、<execution>
▪默认by value传递谓词，算法并不保证在类内保存状态的谓词能正确运作(拷贝谓词导致重置状态)
▪获取谓词状态：
    ▪谓词指向外部状态
    ▪显式指定模板实参为reference
    ▪利用for_each()算法的返回值
▪并行算法：第一参数为std::execution::par

○其它算法
for_each(b, e, op1)               ：返回op(以改动过的)拷贝
count(b, e, v)
count_if(b, e, op1)
min_element(b, e, op2 = lower_to)   ：返回第一个最小值
max_element(b, e, op2 = lower_to)   ：返回第一个最大值
minmax_element(b, e, op2 = lower_to)：返回第一个最小值和最后一个最大值

○搜索算法：返回第一个位置
▪find(b, e, v)                                       ：相当于string::find()，利用反向迭代器则相当于string::rfind()
▪find_if(b, e, op1)
▪find_if_not(b, e, op1)
▪search_n(b, e, count, v, op2 = equal_to)              ：op2(elem, v)
▪search(b, e, searchB, searchE, op2 = equal_to)        ：相当于string::find()
▪find_end(b, e, searchB, searchE, op2 = equal_to)      ：相当于string::rfind()
▪find_first_of(b, e, searchB, searchE, op2 = equal_to) ：相当于string::find_first_of()，利用反向迭代器则相当于string::find_last_of()
▪adjacent_find(b, e, op2 = equal_to)                   ：搜索一对连续相等的元素，返回第一个位置

○更易算法：返回dest更易区间的尾后迭代器
▪move(b, e, destB)
▪move_backward(b, e, destE)         ：调用std::move(element)
▪copy(b, e, destB)                  ：子区间前移
▪copy_backward(b, e, destE)         ：子区间后移
▪copy_if(b, e, destB, op1)
▪copy_n(b, size, destB)
▪transform(b, e, destB, op1)        ：将op1(sourceElem)返回结果写入destB
▪transform(b1, e1, b2, destB, op2)  ：将op2(srcElem1, srcElem2)返回结果写入destB
▪swap_ranges(b, e, destB)
▪replace(b, e, oldV, newV)
▪replace_if(b, e, op1, newV)
▪replace_copy(b, e, destB)
▪replace_copy_if(b, e, destB, op1, newV)
▪remove(b, e, v)
▪remove_if(b, e, op1)
▪remove_copy(b, e, destB, v)
▪remove_copy_if(b, e, destB, op1)
▪unique(b, e, op2=equal_to)         ：需要先排序
▪unique_copy(b, e, destB, op2 = equal_to)
▪fill(b, e, v)
▪fill_n(b, num, v)
▪generate(b, e, op0)
▪generate(b, num, op0)
▪iota(b, e, T)                      ：赋值T, T+1, T+2, ...

○变序算法
▪reverse(b, e)
▪reverse_copy(b, e, destB)
▪rotate(b, newB, e)                 ：返回原本的begin现在的位置
▪rotate_copy(b, newB, e, destB)
▪next_permutation(b, e, op = lower_to)
▪prev_permutation(b, e, op = lower_to)
▪shuffle(b, e, randomEngine)
▪partition(b, e, op1)
▪stable_partition(b, e, op1)
▪partition_copy(b, e, destTrueB, destFalseB, op1)
▪sort(b, e, op2 = lower_to)
▪stable_sort(b, e, op2 = lower_to)
▪partition_sort(b, partE, e, op = lower_to)
▪partition_sort_copy(b, partE, e, op2 = lower_to)
▪nth_element(b, nth, e, op2 = lower_to)
▪make_heap(b, e, op2 = lower_to)
▪push_heap(b, e, op2 = lower_to)
▪pop_heap(b, e, op2 = lower_to)
▪sort_heap(b, e, op2 = lower_to)

○已排序区间算法
▪binary_search(b, e, v, op2 = lower_to)
▪includes(b1, e1, b2, e2, op2 = equal_to)         ：2区间是否为1区间的子序列
▪lower_bound(b, e, v, op2 = lower_to)
▪upper_bound(b, e, v, op2 = lower_to)
▪equal_range(b, e, v, op2 = lower_to)
▪merge(b1, e1, b2, e2, destB, op2 = lower_to)
▪set_union(b1, e1, b2, e2, destB, op2 = lower_to)
▪set_intersection(b1, e1, b2, e2, destB, op2 = lower_to)
▪set_difference(b1, e1, b2, e2, destB, op2 = lower_to)
▪set_symmetric_difference(b1, e1, b2, e2, destB, op2 = lower_to)：并集去交集
▪inplace_merge(b1, b2, e2 ,op)：将同一个集合中的两部分合并，两部分都有序

○数值算法：<numeric>
▪accumulate(b, e, initV, op2 = add)
▪inner_product(b1, e1, b2, e2, initV, op2 = add, op2 = multiply)
▪partial_sum(b, e, destB, op2 = add)            ：a1, a1+a2, a1+a2+a3,
▪adjacent_difference(b, e, destB, op2 = reduce) ：a1, a2-a1, a3-a2,

○区间检验算法：
▪is_sorted(b, e, op2 = lower_to)
▪is_sorted_until(b, e, op2 = lower_to)：返回已排序区间的尾后迭代器
▪is_heap(b, e, op2 = lower_to)
▪is_heap_until(b, e, op2 = lower_to)
▪is_partitioned(b, e, op1)            ：确认使op1为ture的元素都在前面
▪partition_point(b, e, op1)           ：返回第一个使op1为false的元素的位置
▪all_of(b, e, op1)
▪any_of(b, e, op1)
▪none_of(b, e, op1)

○区间比较算法：
▪equal(b, e, cmpB, op2 = equal_to)
▪is_permutation(b, e, b2, op2 = equal_to)：检测前一个区间的元素是否为后者元素的子集，顺序无所谓
▪mismatch(b, e, cmpB, op2 = equal_to)：查找第一个不相同的元素，返回pair存储两个区间的不同点的迭代器
▪lexicographical(b1, e1, b2, e2, op = equal_to)：比较两区间字典序

○bitset：<bitset>
    ▪方便访问指定位
    ▪构造：() (ull) (string) (cstring)
    ▪操作：
        ▪[31m.[many()
        ▪[31m.[mall()
        ▪[31m.[mnone()
        ▪[31m.[mcount()
        ▪[31m.[msize()
        ▪[31m.[mset()      [31m.[mset(pos, v=true)
        ▪[31m.[mreset()    [31m.[mreset(pos)
        ▪[31m.[mflip()     [31m.[mflip(pos)
        ▪b[pos][31m.[mflip()
    ▪转换：
        ▪[31m.[mto_ulong()
        ▪[31m.[mto_ullong()
        ▪[31m.[mto_string(zero, one)


○string：<string>
▪构造、[31m.[massign()、[31m.[mappend()     ：(s)、(s，i)、(s，i，l)、(c)、(c，l)、(char)、(n，char)
▪operator= operator+ operator+= ：(s)、(c)、(char)
▪关系运算符                     ：(s)、(c)
▪[31m.[minsert()                      ：pos + 目标（除了single char）
▪[31m.[mreplace()                     ：范围+ 目标
▪[31m.[msubstr()                      ：范围
▪[31m.[mfind()
▪[31m.[mrfind()
▪[31m.[mfind_first_of()
▪[31m.[mfind_first_not_of()
▪[31m.[mfind_last_of()
▪[31m.[mfind_last_not_of()            ：(s) (s,i) (c) (c,i) (c,i,l) (char) (char,i)
▪[31m.[mcompare()                     ：范围+目标(除了single char、num chars)
▪[31m.[mcopy(buf, length, idx)
▪getline(istrm, string)
▪stoi() stol() stoul() stof() stod() ：(str, idx=nullptr, base=10)
▪to_string(val)
▪参数：
    范围：(i，l)、(b，e)
    目标：(s)、(s，i)、(s，i，l)、(c)、(c，l)、(char)、(n，char)

○string_view：<string_view>
▪原理：只是string或C-string的引用，没有数据的拥有权，只含有元数据
▪目的：高效的提供string接口的拷贝操作，尤其[31m.[msubstr()，当需要const string时改用string_view
▪注意：所有拷贝共享一个底层数据，所以.substr().data()会导致错误（因为'\0'只在最后才有）
▪构造：(string) (string_view) (cstring) (cstring, len)
●额外提供：.remove_prefix和.remove_suffix缩减视图范围

○正则表达式：<regex>
▪组件：
    ▪regex
    ▪sregex_iterator
    ▪sregex_token_iterator
    ▪smatch
    ▪ssub_match
    ▪regex_search()
    ▪regex_match()
    ▪regex_replace((outputPos,)(str|b, e), regex, repl, flag)
    ▪regex_contants： 标志用于控制regex、match、replace行为
▪regex：(seq，regex_contants::icase)
▪sregex_iterator：(b，e，regex) 默认初始化为end
▪sregex_token_iterator：(b，e，r，-1) 保存匹配间的子字符串
▪smatch： 存放ssub_match的容器
    ▪[31m.[msize() [31m.[mempty() [31m.[mprefix() [31m.[msuffix()
    ▪[31m.[mbegin() [31m.[mcbegin() [31m.[mend() [31m.[mcend()
    ▪[31m.[mlength(n) [31m.[mposition(n) [31m.[mstr(n) .operator[]
    ▪[31m.[mformat(dest, fmt, flag)
    ▪[31m.[mformat(fmt, flag)
▪ssub_match： 指向表达式匹配到的子表达式
    .operator basic_string()
▪特殊正则符号：
    \1, \2, \3, ...
    \b：单词边界，左右两边不全为\w的位置
    \B：非单词边界，左右两边全为\w的位置
▪替换语法：
    $1, $2, $3, ...
    $&：全部
    $'：后缀
    $`：前缀

○iostream：<iostream>
▪状态与异常： 注意，当stream会反复使用时，注意要恢复其状态
    ▪[31m.[mgood() [31m.[meof() [31m.[mfaile() [31m.[mbad() [31m.[mrdstate()
    ▪[31m.[mclear() [31m.[mclear(state) [31m.[msetstate(state)
    ▪[31m.[mexcptions(flags)：设定触发异常的flag
    ▪[31m.[mexceptions()：返回触发异常的flag，无则返回ios::goodbit
▪底层I/O：
    ▪[31m.[mget() [31m.[mget(char)
    ▪[31m.[mget(char*, count, delim='\n')     ：读取 count - 1 个字符，并自动添加'\0'在末尾
    ▪[31m.[mgetline(char*, count, delim='\n') ：其他同上，但读取包括delim
    ▪[31m.[mread(char*, count)                ：count代表指定读取的字符，而非极限
    ▪[31m.[mreadsome(char*, count)            ：返回读取字符数，只从缓冲区中读取，而不陷入系统调用
    ▪[31m.[mgcount()                          ：返回上次读取字符数
    ▪[31m.[mignore(count=1, delim=)
    ▪[31m.[mpeek()                            ：返回下个字符，但不移动iterator
    ▪[31m.[munget()                           ：把上次读取的字符放回（回移iterator）
    ▪[31m.[mputback(char)                     ：放回指定字符
    ▪[31m.[mput(char)
    ▪[31m.[mwrite(char*, count)
    ▪[31m.[mflush()
▪随机访问：
    ▪[31m.[mtellg() [31m.[mtellp()
    ▪[31m.[mseekg(pos) [31m.[mseekp(pos)
    ▪[31m.[mseekg(offset, rpos) [31m.[mseekp(offset, rpos)：rpos可以是ios::beg ios::end ios::cur
▪I/O运算符与操作符：后者实质是接受stream的函数对象
▪预定义I/O运算符：
    整型：
        [0-9]*，[0-8]*，
        ((0(x|X))|[0-9a-fA-F])[0-9a-fA-F]*
    浮点型：
        [0-9]+\.?[0-9]*(e[+-]?[0-9]+)?  ，
        \.[0-9]+(e[+-]?[0-9]+)?
    其他：bool，char，char*，void*，string，streambuf*，bitset，complex
▪关联stream：
    以[31m.[mtie()和[31m.[mtie(ostream&)关联，在I/O该stream时冲刷关联的ostream
    以[31m.[mrdbuf()和[31m.[mrdbuf(streambuf*)关联，对同一缓冲区建立多个stream对象
    以[31m.[mcopyfmt()传递所有格式信息
▪关于性能
    ios::sync_with_stdio(false)：关闭C-stream同步与多线程同步机制
    cin[31m.[mtie(nullptr)：关闭cin与cout的关联
▪国际化
    [31m.[mimbue(locale) [31m.[mgetloc()
    [31m.[mwiden(char)   [31m.[mnarrow(c, default)

○操作符：<iomanip>
    ▪endl
    ▪ends
    ▪flush
    ▪(no)unitbuf
    ▪setw(n)
    ▪setfill(c)
    ▪left
    ▪right
    ▪internal
    ▪(no)boolalpha
    ▪(no)showpos：正号
    ▪(no)uppercase
    ▪oct dec hex (no)showbase
    ▪(no)showpoint
    ▪setprecision(v), [31m.[mprecision() [31m.[mprecision(v)
    ▪fixed , scientific：使用这两个操作符后，精度的语义由“所有数字位数”变为“小数位数”

○fstream：<fstream>
▪构造：(filename, flag=)
▪成员：[31m.[mopen(filename, flag=) [31m.[mclose() [31m.[mis_open()
▪flags：
    in
    out
    app
    in|out：文件必须存在
    in|out|trunc：自动创建
    in|app
    in|out|app

○stringstream：<sstream>
▪构造：(string)
▪成员：[31m.[mstr() [31m.[mstr(string)

○streambuf：<streambuf>
▪销毁问题：basic_i/ostream析构时不会销毁，其他stream析构时只是不销毁[31m.[mrdbuf()得到的
▪高效非格式化I/O：
    streambuf_iterator：不通过stream对象直接I/O缓冲区
    streambuf*：利用stream[31m.[mrdbuf()获取后直接调用I/O运算符与另一个流缓冲区对接，注意输入时需要std::noskipws

○locale：<locale>
▪locale：封装了多个facet用于多方面信息本地化
▪facet：数值、货币、时间、编码
▪locale的构造：
    默认："C"
    智能：""
    自定义："zh_CN.UTF-8[@modifier]"
▪提供[31m.[mname()和::global(locale)

○Stream库总览：<iofwd>
▪组件：
    streambuf(系统I/O并缓存数据，提供位置信息)
    locale(包含facet将I/O进行进行本地格式化)
    stream(封装上述两者，提供状态、格式化信息)
    centry(帮助stream每次I/O预处理与后处理)
    操作符(提供调整stream的便捷方法)
    std::ios(定义了一些标志位)

●字符处理：
    <cctype>：字符分类
    <codecvt>：字符编码转换器
    <locale>：转换宽字符需要此头文件
    例：
    ▪wbuffer_convert<codecvt_utf8<wchar_t>> wbuf_utf8(stream[31m.[mrdbuf())
     wistream utf8(&wbuf_utf8)
    ▪wstring_convert<codecvt_utf8<wchar_t>> convertor
     [31m.[mto_bytes() [31m.[mfrom_bytes() 参数：(char) (char*) (string) (beg, end)

○随机数生成器：<random>
▪引擎：默认初始化的种子都一样
    [31m.[mseed() [31m.[mseed(result_type)
▪分布：产生指定分布类型与范围的随机数
▪例：
    default_random_engine e ;
    uniform_int_distribution di(min=0, max=INTMAX) ;
    uniform_real_distribution dr(min=0, max=1.0) ;
    bernoulli_distribution db(p=0.5) ;返回bool
    binomial_distribution dbi(n=1, p=0.5) ;二项分布
    normal_distribution dn(u=0, o=1) ;正态分布
    cout << distribution(engine) << endl ;

○数学库：<cmath>
pow(double_x, double_y)：x**y
exp(double_x)：e**x
exp2(double_x)：2**x
exp10(double_x)：10**x
sqrt(double)
log(double_N)：loge(N)
log2(double_N)：log2(N)
log10(double_N)：log10(N)
cos()
sin()
tan()
acos()
asin()
atan()
ceil(double d)：大于d的最小整数
floor(double d)：小于d的最大整数
fmod(x, y)：浮点数的x%y
frexp(double, int*)：将double拆分成整数(int*)和浮点数(返回值)
abs(x)：x的绝对值，重载了整形和浮点型
div(x, y)：x除以y的商(div_t.quot)和余数(div_t.rem)
gcd(m, n)：欧几里得算法求最大公因数<numeric>

○<cstdlib>
    EXIT_SUCCESS
    EXIT_FAILURE
    exit(status)
    atexit(void (*func)())
    quick_exit(status)
    at_quick_exit(void (*func)())

并发

○线程：<thread> <future>
▪async(launch::async, func, args...)： 封装并启动线程函数，将其返回值存到shared data
    发射策略：launch:: async | deferred
▪future<>和shared_future<>： 可获取shared_data，还包括状态，句柄，异常
    等待状态：future_status:: deferred | timeout | ready
    [31m.[mvalid()
    [31m.[mget() [31m.[mwait()：此两函数会启动deferred
    [31m.[mwait_for(duration) [31m.[mwait_until(time_point)
    [31m.[mshare()
▪this_thread::
    get_id()
    sleep_for(dur)
    sleep_until(tp)
    yield()

○并发问题
    ▪访问共享数据： 数据竞争、数据销毁
    ▪编译器优化： 访存优化、顺序优化

○互斥锁：<mutex>
▪mutex及其变种：
    ▪用法：在全局中声明
        mutex、       recursive_mutex
        timed_mutex、 timed_recursive_mutex
        shared_mutex、shared_timed_mutex：托管给shared_lock为读锁，给unique_lock为写锁
    ▪成员：
        [31m.[mlock()
        [31m.[mtry_lock()
        [31m.[munlock()
        [31m.[mtry_lock_for()
        [31m.[mtry_lock_until()
▪辅助函数：
    ▪lock(mutex...)      ：避免死锁
    ▪try_lock(mutex...)  ：保证加锁次序
    ▪once_flag类型
    ▪call_once(once_flag, func, args...)
▪mutex托管：
    用法：mutex做模板类型，mutex对象做构造参数(可能还有其他参数)，在块作用域中初始化
    lock_guard<> ：adopt_lock
    unique_lock<>：adopt_lock(已锁)、defer_lock(不锁)、try_lock(试锁)、duration、time_point
    shared_lock<>
▪提供原子性操作原理：
    读取mutex - 判断mutex - 上锁或阻塞
    解锁-唤醒

○条件量：<condition_variable>
    ▪依赖于unique_lock<>提供保护区，在全局中声明
    ▪成员：
        [31m.[mwait(ul, pred)
        [31m.[mwait_for(ul, dur, func)
        [31m.[mwait_until(ul, dur, func)
            等待状态：cv_status:: time_out | no_timeout
        [31m.[mnotify_one() [31m.[mnotify_all()
        notify_all_at_thread_exit(cv, ul) 应该在保护区外使用notify...()
    ▪提供原子性操作：
    解锁-阻塞
    唤醒

